package com.edios.pms.controller;



import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.edios.cdf.controller.AbstractController;
import com.edios.cdf.util.DeleteRecords;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.util.TransactionFailedException;
import com.edios.cdf.validator.BaseResponse;
import com.edios.pms.bean.CompoundCompositeItemBean;
import com.edios.pms.bean.PreparedCompoundItemBean;
import com.edios.pms.entity.to.CompoundItemEntityTO;
import com.edios.pms.entity.to.ConfigureCompoundItemsTO;
import com.edios.pms.entity.to.PreparedCompoundItemEntityTO;
import com.edios.pms.manager.PreparedCompoundItemManager;


@RestController
public class PreparedCompoundItemController extends AbstractController {
	@Autowired
	MessageSource messageSource;

	@Autowired
	PreparedCompoundItemManager preparedCompoundItemManager;
	
	
	
	@PostMapping("/fetch-configure-compound-item-details")
	public ResponseEntity<List<CompoundItemEntityTO>> fetchConfiguredCompoundItemdetails(@RequestBody PayloadBean payloadBean) {
		List<CompoundItemEntityTO> objCompoundItemEntityTOList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objCompoundItemEntityTOList = preparedCompoundItemManager.fetchConfiguredCompoundItemdetails(payloadBean);
			return new ResponseEntity<List<CompoundItemEntityTO>>(objCompoundItemEntityTOList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	
	@PostMapping("/fetch-quantity-info-to-prepare-item")
	public ResponseEntity<List<CompoundItemEntityTO>> fetchItemDetailsToPreparedConfigureCompoundItem(@RequestBody PayloadBean payloadBean) {
		List<CompoundItemEntityTO> objCompoundItemEntityTOList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objCompoundItemEntityTOList = preparedCompoundItemManager.fetchItemDetailsToPreparedConfigureCompoundItem(payloadBean);
			return new ResponseEntity<List<CompoundItemEntityTO>>(objCompoundItemEntityTOList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	
	@PostMapping("/fetch-item-info-to-prepare-compound-item")
	public ResponseEntity<List<CompoundItemEntityTO>> fetchConfigureItemDetails(@RequestBody PayloadBean payloadBean) {
		List<CompoundItemEntityTO> objCompoundItemEntityTOList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objCompoundItemEntityTOList = preparedCompoundItemManager.fetchConfigureItemDetails(payloadBean);
			return new ResponseEntity<List<CompoundItemEntityTO>>(objCompoundItemEntityTOList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	
	@PostMapping("/edit-quantity-info-to-prepare-item")
	public ResponseEntity<List<CompoundItemEntityTO>> editItemDetailsToPreparedConfigureCompoundItem(@RequestBody PayloadBean payloadBean) {
		List<CompoundItemEntityTO> objCompoundItemEntityTOList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objCompoundItemEntityTOList = preparedCompoundItemManager.editItemDetailsToPreparedConfigureCompoundItem(payloadBean);
			return new ResponseEntity<List<CompoundItemEntityTO>>(objCompoundItemEntityTOList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	
	@PostMapping("/get-prepared-compound-item-detail")
	public ResponseEntity<List<PreparedCompoundItemEntityTO>> getPreparedCompoundItemDetails(@RequestBody ConfigureCompoundItemsTO payloadBean) {
		List<PreparedCompoundItemEntityTO> objItemOrderEntityTOList=null;
			objItemOrderEntityTOList = preparedCompoundItemManager.getPreparedCompoundItemDetails(payloadBean);
			return new ResponseEntity<List<PreparedCompoundItemEntityTO>>(objItemOrderEntityTOList, HttpStatus.OK);
	}
	@PostMapping("/add-prepared-compound-items")
	public BaseResponse addPreparedCompoundItem(@RequestBody CompoundCompositeItemBean  CreateOrderCompositeBean, HttpServletRequest request) {
		BaseResponse baseResponse = null;
		Long resultString ;
		try {
		 resultString = preparedCompoundItemManager.addPreparedCompoundItem(CreateOrderCompositeBean,request);
		if (resultString!=null) {
			baseResponse = new BaseResponse(HttpStatus.OK, "ADDED", resultString.toString());
		} 
		return baseResponse;
		}catch(Exception exception) {
			exception.printStackTrace();
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Something went wrong! please try again later.");
		}
	}
	
	@PostMapping("/edit-prepared-compound-items")
	public ResponseEntity<CompoundCompositeItemBean> findPreparedCompoundItemBeanDetailsById(@RequestBody PayloadBean payloadBean) {
		if (payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			CompoundCompositeItemBean CreateOrderCompositeBean = preparedCompoundItemManager.findPreparedCompoundItemBeanDetailsById(payloadBean.getId());
			return new ResponseEntity<CompoundCompositeItemBean>(CreateOrderCompositeBean, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	

	@PostMapping("/delete-prepared-compound-item-details")
	public BaseResponse deletePreparedCompoundItemDetailsById(@RequestBody DeleteRecords deleteRecords) {
		BaseResponse baseResponse = null;
		try {
			//siteBean.setIpAddress(request.getRemoteAddr());
			String resultString = preparedCompoundItemManager.deletePreparedCompoundItemDetailsById(deleteRecords);
			if (resultString.equalsIgnoreCase("DELETED")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "DELETED", "");
			}else if (resultString.equalsIgnoreCase("")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "ALREADY_DELETED",
						messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
			}
			return baseResponse;
		}catch(Exception exception) {
			exception.printStackTrace();
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Something went wrong! please try again later.");
		}
	}
	
	@PutMapping("/update-prepared-compound-item")
	public BaseResponse updatePreparedCompoundItemDetails(@RequestBody CompoundCompositeItemBean CompoundCompositeItemBean, HttpServletRequest request) {
		BaseResponse baseResponse = null;
		try {
			//siteBean.setIpAddress(request.getRemoteAddr());
			String resultString = preparedCompoundItemManager.updatePreparedCompoundItemDetails(CompoundCompositeItemBean,request);
			if (resultString.equalsIgnoreCase("UPDATED") ||resultString.equalsIgnoreCase("ADDED")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "UPDATED", "");
			} else if (resultString.equalsIgnoreCase("NameAlreadyExist")) {
				baseResponse = new BaseResponse(HttpStatus.CONFLICT, "CONFLICT",
						messageSource.getMessage("duplicateFieldMessage", new Object[] { "Compound Item Name" }, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("TransactionFailed")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("recordDeleted")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
			}
			return baseResponse;
		} catch (Exception exception) {
			exception.printStackTrace();
			if(exception instanceof TransactionFailedException) {
				return new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						exception.getMessage());
			}
			else
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Something went wrong! please try again later.");
		}
	}
	
	@PutMapping("/check-lot-no-existence")
	public BaseResponse checkLotNoExistenceForItemInUserPharmacyLocation(@RequestBody PayloadBean payloadBean) {
		BaseResponse baseResponse = null;
		try {
			//siteBean.setIpAddress(request.getRemoteAddr());
			String resultString = preparedCompoundItemManager.checkLotNoExistenceForItemInUserPharmacyLocation(payloadBean);
			if (resultString.equalsIgnoreCase("NameNotExist")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "NameNotExist", "");
			} else if (resultString.equalsIgnoreCase("NameAlreadyExist")) {
				baseResponse = new BaseResponse(HttpStatus.CONFLICT, "CONFLICT",
						messageSource.getMessage("duplicateFieldMessage", new Object[] { "Compound Lot No." }, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("TransactionFailed")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("recordDeleted")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
			}
			return baseResponse;
		} catch (Exception exception) {
			exception.printStackTrace();
			
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Something went wrong! please try again later.");
		}
	}
	
	@PostMapping("/add-prepared-compound-item-saved-draft-finalized")
	public BaseResponse addPreparedCompoundItemWithStatus(@RequestBody PreparedCompoundItemBean  objPreparedCompoundItemBean, HttpServletRequest request) {
		BaseResponse baseResponse = null;
		String resultString ;
		try {
		 resultString = preparedCompoundItemManager.addPreparedCompoundItemWithStatus(objPreparedCompoundItemBean,request);
		if (resultString.equalsIgnoreCase("ADDED") || resultString.equalsIgnoreCase("UPDATED")) {
			baseResponse = new BaseResponse(HttpStatus.OK, "ADDED", resultString);
		}else if (resultString.equalsIgnoreCase("TransactionFailed")) {
			baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
					messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
		} else if (resultString.equalsIgnoreCase("recordDeleted")) {
			baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
					messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
		}
		return baseResponse;
		}catch(Exception exception) {
			exception.printStackTrace();
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Something went wrong! please try again later.");
		}
	}
	
	@PostMapping("/validate-prepared-compound-item-before-finalization/{preparedItemId}")
	public BaseResponse validatePreparedCompoundItemBeforeFinalization(@RequestBody List<CompoundItemEntityTO> objCompoundItemEntityTOList,
			@PathVariable("preparedItemId") Long preparedItemId) {
		BaseResponse baseResponse = null;
		try {
			//siteBean.setIpAddress(request.getRemoteAddr());
			String resultString = preparedCompoundItemManager.validatePreparedCompoundItemBeforeFinalization(objCompoundItemEntityTOList,preparedItemId);
			if (resultString.equalsIgnoreCase("NotProcessed")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "NotProcessed", "");
			}else if (resultString.equalsIgnoreCase("Processed")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "Processed",
						"");
			}
			else if(resultString.contains("is less then Eneterd Quantity.")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "OutOfStock",
						resultString);
			}
			return baseResponse;
		}catch(Exception exception) {
			exception.printStackTrace();
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Something went wrong! please try again later.");
		}
	}
}
