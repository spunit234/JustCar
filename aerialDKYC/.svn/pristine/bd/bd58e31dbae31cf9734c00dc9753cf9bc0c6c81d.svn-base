package com.edios.pms.dao.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Repository;

import com.edios.cdf.dao.impl.BaseDaoImpl;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.util.TransactionData;
import com.edios.pms.dao.DistributeOrderDao;
import com.edios.pms.entity.ItemOrderEntity;
import com.edios.pms.entity.ItemOrderProcessingEntity;
import com.edios.pms.entity.ItemStockEntity;
import com.edios.pms.entity.to.ItemOrderEntityTO;
import com.edios.pms.entity.to.ItemOrderProcessingTO;
import com.edios.pms.entity.to.ItemStockEntityTO;
import com.edios.pms.entity.to.ReportsTO;

@Repository
public class DistributeOrderDaoImpl extends BaseDaoImpl<ItemOrderEntity> implements DistributeOrderDao {
	@Autowired
	MessageSource messageSource;
	
	@Override
	public List<ItemOrderEntityTO> getItemDistributeOrderDetails(PayloadBean payloadBean) {

		List<ItemOrderEntityTO> objItemOrderEntityTOList = null;
		String sqlQuery = "",whereClause="";
		if(payloadBean.getCustomParameter()!=null && !payloadBean.getCustomParameter().trim().equals("")) {
			whereClause=" and itemOrder.indentNo='"+payloadBean.getCustomParameter()+"' ";
		}
		String dateFormat = messageSource.getMessage("dateFormat", null, "", Locale.US);
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select itemOrder.itemOrderId as itemOrderId,itemOrder.indentNo as indentNo,itemOrder.orderDate as orderDate,"
					+ "itemOrder.orderPlace as orderPlace,pharmacyLoc.pharmacyLocationName as otPharmacyLocationName,itemOrder.ofPharmacyLocation.pharmacyLocationName as ofPharmacyLocationName,"
					+ "itemOrder.orderStatus as orderStatus"
					+ " from ItemOrderEntity itemOrder"
					+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on itemOrder.otPharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId "
					+ " left join itemOrder.otPharmacyLocation pharmacyLoc"
						+ " where itemOrder.recordType<>'D' and pharmacyLocationUser.userId.userID=:userID and itemOrder.orderStatus=:orderStatus "+whereClause+" order by itemOrder.itemOrderId asc";
			objItemOrderEntityTOList = (List<ItemOrderEntityTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getId()).setParameter("orderStatus", payloadBean.getSearchParameter())
					.setResultTransformer(Transformers.aliasToBean(ItemOrderEntityTO.class)).list();
			
			
		
		return objItemOrderEntityTOList;
	
	}

	@Override
	public List<ItemStockEntityTO> getInStockItemDetails(ItemStockEntityTO payloadBean) {
		SimpleDateFormat objSimpleDateFormat= new SimpleDateFormat("yyyy-MM-dd");
		List<ItemStockEntityTO> objItemOrderEntityTOList = null;
		List<ItemStockEntityTO> objItemOrderEntityTOList1 = null;
		String sqlQuery = "";
		//System.out.println("Item id "+payloadBean.getItemId()+"  Pack Size "+payloadBean.getPackSizeId()+" User Id "+payloadBean.getUserID()+" ItemOrder DetailId "+payloadBean.getItemOrderDetailId());
		Session session = (Session) entityManager.getDelegate();
		//sqlQuery="select itemOrderProcessing.itemOrderProcessingId from ItemOrderProcessingEntity itemOrderProcessing where itemOrderProcessing.itemOrderDetail.itemOrderDetailId=:itemOrderDetailId";
		//objItemOrderEntityTOList = (List<ItemStockEntityTO>) session.createQuery(sqlQuery).setParameter("itemOrderDetailId", payloadBean.getItemOrderDetailId())
			//	.setResultTransformer(Transformers.aliasToBean(ItemStockEntityTO.class)).list();
		
		//for(ItemStockEntityTO)
		//System.out.println(objItemOrderEntityTOList);
		//System.out.println(objItemOrderEntityTOList.size());
		String dateFormat = messageSource.getMessage("dateFormat", null, "", Locale.US);
		//if(objItemOrderEntityTOList.size()>=1) {
			sqlQuery ="select itemOrderProcessing.itemOrderProcessingId as itemOrderProcessingId,itemOrderProcessing.distributedQuantity as distributeQuantity,itemStock.itemStockId as itemStockId,itemStock.lotNo as lotNo,itemStock.expiryDate as expiryDate,itemPackSizes.packSize as packSize,"
					+ "itemStock.unitCost as unitCost,itemStock.totalCost as totalCost,itemStock.quantityOnHand as quantityOnHand,itemStock.transactionCount as itemStockTransactionCount,itemOrderProcessing.transactionCount as processingTransactionCount,itemOrderProcessing.itemOrderDetail.itemOrderDetailId as itemOrderDetailId"
					+ " from ItemOrderProcessingEntity itemOrderProcessing"
					+ " right join itemOrderProcessing.itemStock itemStock"
					+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on itemStock.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId "
					+ " left join itemStock.item items"
					+ " left join itemStock.itemPackSize itemPackSizes"
						+ " where (itemOrderProcessing.itemOrderDetail is null or itemOrderProcessing.itemOrderDetail.itemOrderDetailId=:itemOrderDetailId) and itemStock.itemStockStatus='InStock' and itemStock.recordType<>'D' and pharmacyLocationUser.userId.userID=:userID and items.itemId=:itemId and itemPackSizes.packSizeId=:packSizeId and SUBSTRING(CAST(itemStock.expiryDate AS string), 1, 10)>'"+objSimpleDateFormat.format(new Date())+"' order by itemStock.itemStockId asc";
			objItemOrderEntityTOList = (List<ItemStockEntityTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getUserID()).setParameter("itemId", payloadBean.getItemId()).setParameter("packSizeId", payloadBean.getPackSizeId()).setParameter("itemOrderDetailId", payloadBean.getItemOrderDetailId())
					.setResultTransformer(Transformers.aliasToBean(ItemStockEntityTO.class)).list();
			
//		}
//		else {
			sqlQuery ="select itemStock.itemStockId as itemStockId,itemStock.lotNo as lotNo,itemStock.expiryDate as expiryDate,itemPackSizes.packSize as packSize,"
					+ "itemStock.unitCost as unitCost,itemStock.totalCost as totalCost,itemStock.quantityOnHand as quantityOnHand,itemStock.transactionCount as itemStockTransactionCount"
					+ " from ItemStockEntity itemStock"
					+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on itemStock.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId "
					+ " left join itemStock.item items"
					+ " left join itemStock.itemPackSize itemPackSizes"
						+ " where itemStock.itemStockStatus='InStock' and itemStock.recordType<>'D' and pharmacyLocationUser.userId.userID=:userID and items.itemId=:itemId and itemPackSizes.packSizeId=:packSizeId and SUBSTRING(CAST(itemStock.expiryDate AS string), 1, 10)>'"+objSimpleDateFormat.format(new Date())+"' order by itemStock.itemStockId asc";
			objItemOrderEntityTOList1 = (List<ItemStockEntityTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getUserID()).setParameter("itemId", payloadBean.getItemId()).setParameter("packSizeId", payloadBean.getPackSizeId())
					.setResultTransformer(Transformers.aliasToBean(ItemStockEntityTO.class)).list();
			boolean flag=true;
			for(ItemStockEntityTO objItemOrderEntityTO : objItemOrderEntityTOList1)
			{
				flag=true;
				for(ItemStockEntityTO objItemOrderEntityTO1 : objItemOrderEntityTOList)
				{
					if(objItemOrderEntityTO.getItemStockId().equals(objItemOrderEntityTO1.getItemStockId())) {
						flag=false;
						break;
					}
				}
				if(flag) {
					objItemOrderEntityTOList.add(objItemOrderEntityTOList.size(), objItemOrderEntityTO);
				}
			}
		//}
			
		
		return objItemOrderEntityTOList;
	
	}

	@Override
	public boolean addItemOrderProcessingDetails(ItemOrderProcessingEntity ItemOrderProcessingEntity) {
		entityManager.persist(ItemOrderProcessingEntity);
		return true;
	}

	@Override
	public ItemStockEntity fetchItemStockEntityById(Long id) {
		return entityManager.find(ItemStockEntity.class, id);
	}

	@Override
	public boolean updateItemStockEnitity(ItemStockEntity objItemStockEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.merge(objItemStockEntity);
		return true;
	}

	@Override
	public TransactionData fetchTransactionDataById(Long id) {
		TransactionData transactionData = null;
		String sqlQuery = "";
		
			Session session = (Session) entityManager.getDelegate();
			sqlQuery = "select table.transactionCount as transactionCount,table.recordType as recordType"
					+ " from  ItemStockEntity table where table.itemStockId=:itemStockId";
			transactionData = (TransactionData) session.createQuery(sqlQuery).setParameter("itemStockId", id)
					.setResultTransformer(Transformers.aliasToBean(TransactionData.class)).list().get(0);
		
		return transactionData;
	}
	@Override
	public boolean updateItemOrder(ItemOrderEntity ItemOrderEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.merge(ItemOrderEntity);
		return true;
	}

	@Override
	public ItemOrderProcessingEntity fetchItemOrderProcessingEntityById(Long id) {
		return entityManager.find(ItemOrderProcessingEntity.class, id);
	}

	@Override
	public boolean updateItemOrderProcessingDetails(ItemOrderProcessingEntity objItemOrderProcessingEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.merge(objItemOrderProcessingEntity);
		return true;
	}

	@Override
	public ItemOrderProcessingTO fetchItemOrderProcessingEntityDetails(Long id) {


		ItemOrderProcessingTO objItemOrderProcessingTO = null;
		String sqlQuery = "";
		
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select itemStock.itemStockId as itemStockId,distributedQuantity as distributeQuantity"
					+ " from ItemOrderProcessingEntity"
					+ " where itemOrderProcessingId=:itemOrderProcessingId";
			objItemOrderProcessingTO = (ItemOrderProcessingTO) session.createQuery(sqlQuery).setParameter("itemOrderProcessingId", id)
					.setResultTransformer(Transformers.aliasToBean(ItemOrderProcessingTO.class)).getSingleResult();
			
			
		
		return objItemOrderProcessingTO;
	
	
	}

	@Override
	public boolean deleteItemOrderProcessingById(Long id) {
		String sqlQuery="";
		int count=0;
		Session session = (Session) entityManager.getDelegate();
		sqlQuery ="delete from ItemOrderProcessingEntity"
				+ " where itemOrderProcessingId=:itemOrderProcessingId";
		 count=session.createQuery(sqlQuery).setParameter("itemOrderProcessingId", id)
				.executeUpdate();
		 if(count>0)
			 return true;
		 else
			 return false;
	}

	@Override
	public List<ReportsTO> checkItemOrderDetailsCompletedOrNot(List<Long> itemOrderDetailIdList) {
		List<ReportsTO> objItemOrderEntityTOList = null;
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select itemOrderDetail.orderQuantity as orderQuantity,sum(itemOrderProcessing.distributedQuantity) as distributeQuantity"
					+ " from ItemOrderProcessingEntity itemOrderProcessing"
					+ " right join itemOrderProcessing.itemOrderDetail itemOrderDetail"
						+ " where itemOrderDetail.itemOrderDetailId in:itemOrderDetailIdList group by itemOrderDetail.itemOrderDetailId,itemOrderDetail.orderQuantity";
			objItemOrderEntityTOList = (List<ReportsTO>) session.createQuery(sqlQuery).setParameterList("itemOrderDetailIdList", itemOrderDetailIdList)
					.setResultTransformer(Transformers.aliasToBean(ReportsTO.class)).list();
			return objItemOrderEntityTOList;
		}
	
	
	
}
