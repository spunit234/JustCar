package com.edios.pms.dao.impl;

import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.persistence.NoResultException;
import javax.persistence.Query;
import javax.persistence.TemporalType;

import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Repository;

import com.edios.cdf.dao.impl.BaseDaoImpl;
import com.edios.cdf.util.TransactionData;
import com.edios.pms.dao.PharmacyDao;
import com.edios.pms.entity.PharmacyStoreEntity;
import com.edios.pms.entity.to.PharmacyStoreTO;


@Repository
public class PharmacyDaoImpl extends BaseDaoImpl <PharmacyStoreEntity> implements PharmacyDao{

	@Autowired
	MessageSource message;
	@Override
	public List<PharmacyStoreTO> fetchPharmacyLookUp() {
		try {
			Session session=(Session) entityManager.getDelegate();
			@SuppressWarnings("unchecked")
			List<PharmacyStoreTO> pharmacyStoreTO=session.createQuery("select site.siteID as siteID, site.siteName as siteName "
					+ " from SiteEntity as site where recordType<>'D'  ").setResultTransformer(Transformers.aliasToBean(PharmacyStoreTO.class)).list();

		return pharmacyStoreTO;
		}catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	@Override
	public boolean addPharmacy(PharmacyStoreEntity pharmacyStoreEntity) {
		try {
			Session session = (Session) entityManager.getDelegate();
			session.save(pharmacyStoreEntity);				
		} catch (Exception exception) {
			exception.printStackTrace();
			return false;
		}
		return true;
	}
	
	@SuppressWarnings({ "deprecation", "unchecked" })
	@Override
	public List<PharmacyStoreTO> fetchPharmacy(String searchParameter) {
		List<PharmacyStoreTO> pharmacyStoreTOList = null;
		String sqlQuery = "";
		try {
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select pharmacy.pharmacyStoreId As pharmacyStoreId,pharmacy.pharmacyStoreName As pharmacyStoreName,siteEntity.siteName as siteName, "
					+ "pharmacy.pharmacyStoreCode As pharmacyStoreCode,pharmacy.contactPersonName As contactPersonName,"
					+ "pharmacy.contactPersonPhone As contactPersonPhone,pharmacy.pharmacyStoreStatus As pharmacyStoreStatus,"
					+ "pharmacy.transactionCount As transactionCount from PharmacyStoreEntity pharmacy left join pharmacy.siteId siteEntity where pharmacy.pharmacyStoreStatus='"+searchParameter+"' and pharmacy.recordType<>'D'";
			pharmacyStoreTOList = (List<PharmacyStoreTO>) session.createQuery(sqlQuery).setResultTransformer(Transformers.aliasToBean(PharmacyStoreTO.class)).list();
		}catch (Exception exception) {
			exception.printStackTrace();
			return null;
		}
		
		return pharmacyStoreTOList;
	}

	@Override
	public PharmacyStoreEntity findPharmacyById(Long id) {
		//PharmacyStoreEntity pharmacyStoreEntity = null;
		//String sqlQuery = "";
		//System.out.println("Is is ::::: "+id);
		/*try {
			sqlQuery = "from  PharmacyStoreEntity as pharmacy where pharmacy.pharmacyStoreId=:pharmacyStoreId ";
			pharmacyStoreEntity = (PharmacyStoreEntity) entityManager.createQuery(sqlQuery).setParameter("pharmacyStoreId", id).getSingleResult();*/
			return entityManager.find(PharmacyStoreEntity.class, id);
		/*} catch (NoResultException noResultException) { 
			return null;
		} catch (Exception exception) {
			exception.printStackTrace();
			return null;
		}*/
		//return pharmacyStoreEntity;
	}
	
	@Override
	public TransactionData fetchTransactionDataById(Long id) {
		TransactionData transactionData = null;
		String sqlQuery = "";
		try {
			Session session = (Session) entityManager.getDelegate();
			sqlQuery = "select table.transactionCount as transactionCount,table.recordType as recordType "
					+ " from  PharmacyStoreEntity table where table.pharmacyStoreId=:pharmacyStoreId";
			transactionData = (TransactionData) session.createQuery(sqlQuery).setParameter("pharmacyStoreId", id)
					.setResultTransformer(Transformers.aliasToBean(TransactionData.class)).list().get(0);
			
		} catch (Exception exception) {
			exception.printStackTrace();
			return null;
		}
		return transactionData;
	}
	@Override
	public boolean deletePharmacy(Long id, Integer modifiedBy) {
		boolean result = true;
		try {
			String hql = "update PharmacyStoreEntity le set le.lastModifiedDate=:lastModifiedDate"
					+ " , le.recordType='D' , le.lastModifiedBy="+modifiedBy+""
					+ " WHERE le.pharmacyStoreId="+id+"";
			Session session = (Session) entityManager.getDelegate();
			 session.createQuery(hql).setParameter("lastModifiedDate", new Date(), TemporalType.TIMESTAMP).executeUpdate();
			
		} catch (Exception exception) {
			exception.printStackTrace();
			return false;
		}
		return result;
	}
	@Override
	public boolean updatePharmacy(PharmacyStoreEntity pharmacyStoreEntity) {
		boolean result = true;
		try {
			Session session = (Session) entityManager.getDelegate();
			session.update(pharmacyStoreEntity);
		} catch (Exception exception) {
			exception.printStackTrace();
			return false;
		}
		return result;
	}
	@Override
	public boolean checkStoreCode(String pharmacyStoreCode,Long storeID) {
		try {
			return entityManager.createQuery(
					"select table.pharmacyStoreCode as pharmacyStoreCode from PharmacyStoreEntity table where "
							+ " table.pharmacyStoreCode='" + pharmacyStoreCode+"' and table.pharmacyStoreId!="+storeID)
					.getSingleResult() == null ? false : true;
		} catch (NoResultException ex) {
			return false;
		} catch (Exception exception) {
			exception.printStackTrace();
			return true;
		}
	
	}
	@Override
	public boolean checkStoreName(String pharmacyStoreName, Long storeId) {
		try {
			return entityManager.createQuery(
					"select table.pharmacyStoreName as pharmacyStoreName from PharmacyStoreEntity table where "
							+ " table.pharmacyStoreName='" + pharmacyStoreName+"' and table.pharmacyStoreId!="+storeId)
					.getSingleResult() == null ? false : true;
		} catch (NoResultException ex) {
			return false;
		} catch (Exception exception) {
			exception.printStackTrace();
			return true;
		}
	
	}
	
}