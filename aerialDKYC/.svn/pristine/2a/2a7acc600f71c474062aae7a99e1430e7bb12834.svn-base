package com.edios.pms.controller;



import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.edios.cdf.controller.AbstractController;
import com.edios.cdf.entity.to.SiteEntityTO;
import com.edios.cdf.util.DeleteRecords;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.validator.BaseResponse;
import com.edios.pms.bean.WorksStationAssignmentBean;
import com.edios.pms.entity.to.PharmacyLocationEntityTO;
import com.edios.pms.entity.to.PharmacyLocationRobotEntityTO;
import com.edios.pms.entity.to.WorksStationAssignmentTO;
import com.edios.pms.manager.WorksStationAssignmentManager;


@RestController
public class WorksStationAssignmentController extends AbstractController {
	@Autowired
	MessageSource messageSource;

	@Autowired
	WorksStationAssignmentManager worksStationAssignmentManager;

	
	@PostMapping("/search-assign-work-station-on-criteria")
	public ResponseEntity<List<WorksStationAssignmentTO>> getWorkStationAssigmentDetails(@RequestBody PayloadBean payloadBean) {
		List<WorksStationAssignmentTO> objPharmacyLocationEntityTO=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objPharmacyLocationEntityTO = worksStationAssignmentManager.getWorkStationAssigmentDetails(payloadBean);
			return new ResponseEntity<List<WorksStationAssignmentTO>>(objPharmacyLocationEntityTO, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	
	@PostMapping("/fetch-autolookup-site-info")
	public ResponseEntity<List<SiteEntityTO>> fetchSiteDetails(@RequestBody PayloadBean payloadBean) {
		List<SiteEntityTO> objSiteEntityTOList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objSiteEntityTOList = worksStationAssignmentManager.fetchSiteDetails();
			return new ResponseEntity<List<SiteEntityTO>>(objSiteEntityTOList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	
	@PostMapping("/fetch-autolookup-pharmacy-location-info-for-site")
	public ResponseEntity<List<PharmacyLocationEntityTO>> fetchPharmacyLocationForSiteDetails(@RequestBody PayloadBean payloadBean) {
		List<PharmacyLocationEntityTO> objPharmacyLocationEntityTOList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objPharmacyLocationEntityTOList = worksStationAssignmentManager.fetchPharmacyLocationForSiteDetails(payloadBean.getId());
			return new ResponseEntity<List<PharmacyLocationEntityTO>>(objPharmacyLocationEntityTOList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	@PostMapping("/add-assign-work-station")
	public BaseResponse addAssignWorkStation(@RequestBody WorksStationAssignmentBean objWorksStationAssignmentBean, HttpServletRequest request) {
		BaseResponse baseResponse = null;
		try {
		objWorksStationAssignmentBean.setIpAddress(request.getRemoteAddr());
		String resultString = worksStationAssignmentManager.addAssignWorkStation(objWorksStationAssignmentBean);
		if (resultString.equalsIgnoreCase("ADDED")) {
			baseResponse = new BaseResponse(HttpStatus.OK, "ADDED", "");
		} else if (resultString.equalsIgnoreCase("NameAlreadyExist")) {
			baseResponse = new BaseResponse(HttpStatus.ALREADY_REPORTED, "ALREADY_REPORTED",
					messageSource.getMessage("duplicateFieldMessage", new Object[] { "Work Station Name" }, "", Locale.US));
		} else if (resultString.equalsIgnoreCase("CodeAlreadyExist")) {
			baseResponse = new BaseResponse(HttpStatus.ALREADY_REPORTED, "ALREADY_REPORTED",
					messageSource.getMessage("duplicateFieldMessage", new Object[] { "Work Station Code" }, "", Locale.US));
		}
		}catch(Exception e) {
			e.printStackTrace();
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Some Thing went wrong! please try later.");
		}
		return baseResponse;
	}

	@PostMapping("/edit-assign-work-station")
	public ResponseEntity<WorksStationAssignmentBean> findWorkStationById(@RequestBody PayloadBean payloadBean) {
		if (payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			WorksStationAssignmentBean worksStationAssignmentBean = worksStationAssignmentManager.findWorkStationById(payloadBean.getId());
			return new ResponseEntity<WorksStationAssignmentBean>(worksStationAssignmentBean, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(null, HttpStatus.UNAUTHORIZED);
		}
	}

	@PutMapping("/update-assign-work-station")
	public BaseResponse updateAssignWorkStation(@RequestBody WorksStationAssignmentBean WorksStationAssignmentBean, HttpServletRequest request) {
		BaseResponse baseResponse = null;
		try {
			WorksStationAssignmentBean.setIpAddress(request.getRemoteAddr());
			String resultString = worksStationAssignmentManager.updateAssignWorkStation(WorksStationAssignmentBean);
			if (resultString.equalsIgnoreCase("UPDATED")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "UPDATED", "");
			} else if (resultString.equalsIgnoreCase("NameAlreadyExist")) {
				baseResponse = new BaseResponse(HttpStatus.CONFLICT, "CONFLICT",
						messageSource.getMessage("duplicateFieldMessage", new Object[] { "Work Station Name" }, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("CodeAlreadyExist")) {
				baseResponse = new BaseResponse(HttpStatus.CONFLICT, "CONFLICT",
						messageSource.getMessage("duplicateFieldMessage", new Object[] { "Work Station Code" }, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("TransactionFailed")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("recordDeleted")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
			}
			return baseResponse;
		} catch (Exception e) {
			e.printStackTrace();
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Some Thing went wrong! please try later.");
		}
	}

	@PostMapping("/delete-assign-work-station")
	public BaseResponse deleteAssignWorkStation(@RequestBody DeleteRecords deleteRecords) {
		BaseResponse baseResponse = null;
		try {
			String resultString = worksStationAssignmentManager.deleteAssignWorkStation(deleteRecords);
			if (resultString.equalsIgnoreCase("DELETED")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "DELETED", "");
			} else if (resultString.equalsIgnoreCase("TransactionFailed")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("recordDeleted")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
			}
			return baseResponse;
		} catch (Exception e) {
			e.printStackTrace();
			return baseResponse;
		}
	}
	
	@PostMapping("/fetch-pharmacy-location-robots")
	public ResponseEntity<List<PharmacyLocationRobotEntityTO>> fetchPharmacyLocationRobots(@RequestBody PayloadBean payloadBean) {
		List<PharmacyLocationRobotEntityTO> pharmacyLocationRobotEntityTOList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			pharmacyLocationRobotEntityTOList = worksStationAssignmentManager.fetchPharmacyLocationRobots(payloadBean.getId());
			return new ResponseEntity<List<PharmacyLocationRobotEntityTO>>(pharmacyLocationRobotEntityTOList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
}
