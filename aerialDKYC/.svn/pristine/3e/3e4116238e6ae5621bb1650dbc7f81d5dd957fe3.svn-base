package com.edios.pms.dao.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.persistence.NoResultException;
import javax.persistence.TemporalType;
import javax.servlet.http.HttpServletRequest;

import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.hibernate.type.StandardBasicTypes;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.edios.cdf.dao.impl.BaseDaoImpl;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.util.TransactionData;
import com.edios.pms.dao.PatientDispensingDao;
import com.edios.pms.entity.PatientDispensedItemEntity;
import com.edios.pms.entity.PatientEntity;
import com.edios.pms.entity.PatientPrescribedItemEntity;
import com.edios.pms.entity.PatientPrescriptionEntity;
import com.edios.pms.entity.to.DispenseMedicationsTO;
import com.edios.pms.entity.to.ItemStockEntityTO;
import com.edios.pms.entity.to.PatientDispensedItemsTO;
import com.edios.pms.entity.to.PatientEncounterEntityTO;
import com.edios.pms.entity.to.PatientEntityTO;
import com.edios.pms.entity.to.PatientPrescriptionEntityTO;

@Repository
public class PatientDispensingDaoImpl extends BaseDaoImpl<PatientEntity> implements PatientDispensingDao {
	@Autowired
	MessageSource messageSource;

	@Override
	public List<PatientEntityTO> getPatientDetails(PatientEntityTO payloadBean) {
		String dateFormat = messageSource.getMessage("dateFormat", null, "", Locale.US);
		List<PatientEntityTO> objPatientEntityTOList = null;
		String sqlQuery = "", whereClause = "";
		if (payloadBean.getPatientNo() != null && !payloadBean.getPatientNo().trim().equals("")) {
			whereClause = "and patientNo = '" + payloadBean.getPatientNo() + "' ";
		}
		if (payloadBean.getFirstName() != null && !payloadBean.getFirstName().trim().equals("")) {
			whereClause += "and firstName = '" + payloadBean.getFirstName() + "' ";
		}
		if (payloadBean.getLastName() != null && !payloadBean.getLastName().trim().equals("")) {
			whereClause += "and lastName = '" + payloadBean.getLastName() + "' ";
		}
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select patientId as patientId,patientNo as patientNo,firstName as firstName,lastName as lastName,birthDate as birthDate"
				+ ",gender as gender,homePhone as homePhone,mobilePhone as mobilePhone,patientStatus as patientStatus,transactionCount as transactionCount"
				+ " from PatientEntity " + " where patientStatus =:patientStatus " + whereClause
				+ "order by patientId asc";
		objPatientEntityTOList = (List<PatientEntityTO>) session.createQuery(sqlQuery)
				.setParameter("patientStatus", payloadBean.getPatientStatus())
				.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();

		return objPatientEntityTOList;

	}

	@Override
	public PatientEntity getPatientDetailsById(Long patientId) {
		// TODO Auto-generated method stub
		return entityManager.find(PatientEntity.class, patientId); 
	}

	@Override
	public List<PatientEncounterEntityTO> getPatientPatientEncounterDetailsById(PayloadBean payloadBean) {
		String dateFormat = messageSource.getMessage("dateFormat", null, "", Locale.US);
		List<PatientEncounterEntityTO> objPatientEncounterEntityList = null;
		String sqlQuery="";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select pat.patientId as patientId,patPres.patientPrescriptionId as patientPrescriptionId,patientEncounter.admitDateTime as admitDateTime,patientEncounter.visitNumber as visitNumber,"
				+ "patientEncounter.patientType as patientType,patientEncounter.admissionType as admissionType,patientEncounter.attendingDoctor as attendingDoctor,patientEncounter.referringDoctor as referringDoctor,"
				+ "patientEncounter.dischargeDateTime as dischargeDateTime,patPres.prescriptionDateTime as prescriptionDateTime,patPres.transactionCount as transactionCount,patPres.prescriptionNo as prescriptionNo,patPres.prescriptionStatus as prescriptionStatus"
				+ " from PatientPrescriptionEntity patPres left join patPres.patientEncounter patientEncounter left join patientEncounter.patient pat where patientEncounter.patientEncounterId =:patientEncounterId "
				+ "order by admitDateTime desc";
		objPatientEncounterEntityList = (List<PatientEncounterEntityTO>) session.createQuery(sqlQuery).setParameter("patientEncounterId", payloadBean.getId())
				.setResultTransformer(Transformers.aliasToBean(PatientEncounterEntityTO.class)).list();

		return objPatientEncounterEntityList;
	}

	@Override
	public List<PatientPrescriptionEntityTO> getPatientPatientPrescribedDetailsByEncounterId(Long encounterId) {
		String dateFormat = messageSource.getMessage("dateFormat", null, "", Locale.US);
		List<PatientPrescriptionEntityTO> objPatientPrescriptionEntityTOList = null;
		String sqlQuery="";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select patPres.patientPrescriptionId as patientPrescriptionId,patientPrescribedItem.prescribedItemId as prescribedItemId,item.itemName as itemName,"
				+ "patientPrescribedItem.itemSig as itemSig,patientPrescribedItem.prescribedQuantity as prescribedQuantity,patientPrescribedItem.prescribedStatus as prescribedStatus,"
				+ "sum(patientDispensedItem.dispensedQuantity) as dispensedQuantity,patPres.prescriptionStatus as prescriptionStatus,patPres.prescriptionStatus as previousPrescriptionStatus"
				+ " ,patPres.transactionCount as patientPrescriptionTransactionCount,patientPrescribedItem.transactionCount as patientPrescriptionItemTransactionCount"
				+ " from PatientDispensedItemEntity patientDispensedItem"
				+ " right join patientDispensedItem.patientPrescribedItem patientPrescribedItem"
				+ " left join patientPrescribedItem.patientPrescription patPres "
				+ "left join patientPrescribedItem.item item "
				+ "where patPres.patientEncounter.patientEncounterId =:patientEncounterId "
				+ "group by patPres.prescriptionStatus,patientPrescribedItem.prescribedItemId,patPres.patientPrescriptionId,patientPrescribedItem.prescribedItemId,patPres.prescriptionDateTime,item.itemName,"
				+ "patientPrescribedItem.itemSig,patientPrescribedItem.prescribedQuantity,patientPrescribedItem.prescribedStatus,patPres.transactionCount,patientPrescribedItem.transactionCount order by itemName asc";
		objPatientPrescriptionEntityTOList = (List<PatientPrescriptionEntityTO>) session.createQuery(sqlQuery).setParameter("patientEncounterId", encounterId)
				.setResultTransformer(Transformers.aliasToBean(PatientPrescriptionEntityTO.class)).list();

		return objPatientPrescriptionEntityTOList;
	}
	
	@Override
	public PatientPrescriptionEntityTO getPatientPatientPrescribedDetailsByPrescribedItemId(Long prescribedItemId) {
		String dateFormat = messageSource.getMessage("dateFormat", null, "", Locale.US);
		PatientPrescriptionEntityTO objPatientPrescriptionEntityTO = null;
		String sqlQuery="";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select patPres.patientPrescriptionId as patientPrescriptionId,patientPrescribedItem.prescribedItemId as prescribedItemId,item.itemName as itemName,"
				+ "patientPrescribedItem.itemSig as itemSig,patientPrescribedItem.prescribedQuantity as prescribedQuantity,patientPrescribedItem.prescribedStatus as prescribedStatus,"
				+ "sum(patientDispensedItem.dispensedQuantity) as dispensedQuantity,patPres.prescriptionStatus as prescriptionStatus,patPres.prescriptionStatus as previousPrescriptionStatus"
				+ " ,patPres.transactionCount as patientPrescriptionTransactionCount,patientPrescribedItem.transactionCount as patientPrescriptionItemTransactionCount"
				+ " from PatientDispensedItemEntity patientDispensedItem"
				+ " right join patientDispensedItem.patientPrescribedItem patientPrescribedItem"
				+ " left join patientPrescribedItem.patientPrescription patPres "
				+ "left join patientPrescribedItem.item item "
				+ "where patientPrescribedItem.prescribedItemId=:prescribedItemId "
				+ "group by patPres.prescriptionStatus,patientPrescribedItem.prescribedItemId,patPres.patientPrescriptionId,patientPrescribedItem.prescribedItemId,patPres.prescriptionDateTime,item.itemName,"
				+ "patientPrescribedItem.itemSig,patientPrescribedItem.prescribedQuantity,patientPrescribedItem.prescribedStatus,patPres.transactionCount,patientPrescribedItem.transactionCount order by itemName asc";
		objPatientPrescriptionEntityTO = (PatientPrescriptionEntityTO) session.createQuery(sqlQuery).setParameter("prescribedItemId", prescribedItemId)
				.setResultTransformer(Transformers.aliasToBean(PatientPrescriptionEntityTO.class)).getSingleResult();

		return objPatientPrescriptionEntityTO;
	}

	@Override
	public List<PatientDispensedItemsTO> getPerscribedItemsToBeDispensed(PatientDispensedItemsTO payloadBean) {
		SimpleDateFormat objSimpleDateFormat= new SimpleDateFormat("yyyy-MM-dd");
		List<PatientDispensedItemsTO> objPatientDispensedItemsTOList = null;
		List<PatientDispensedItemsTO> objPatientDispensedItemsTOMainList = null;
		String sqlQuery = "",whereClasue="";;
		if(payloadBean.getSearchParameter().equalsIgnoreCase("Yes"))
			whereClasue=" and (robotInfo.robotStatus='Active' or robotInfo.robotId is null)";
		else
			whereClasue=" and robotInfo.robotId is null";
		Session session = (Session) entityManager.getDelegate();
		String dateFormat = messageSource.getMessage("dateFormat", null, "", Locale.US);
		sqlQuery ="select dispensedDetail.dispensedItemId as dispensedItemId,patPreItemDetail.prescribedItemId as prescribedItemId,dispensedDetail.dispensedQuantity as dispensedQuantity,dispensedDetail.dispensedQuantity as dupliDispensedQuantity,itemStock.itemStockId as itemStockId,itemStock.lotNo as lotNo,itemStock.expiryDate as expiryDate,"
				+ "itemStock.item.itemName as itemName,itemStock.quantityOnHand as quantityOnHand,patPreItemDetail.transactionCount as prescribedItemTransactionCount,dispensedDetail.transactionCount as dispensedTransactionCount,coalesce(robotInfo.robotName,'Shelf') as robotName"
				+ " from PatientDispensedItemEntity dispensedDetail"
				+ " right join dispensedDetail.patientPrescribedItem patPreItemDetail"
				+ " left join patPreItemDetail.patientPrescription patPresDetail"
				+ " left join dispensedDetail.itemStock itemStock"
				+ " left join itemStock.robot robotInfo"
				//+ " left join itemDetail."
				//+ " inner join ItemStockEntity itemStock on itemStock.item.itemId=patPreItemDetail.item.itemId"
				+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on itemStock.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId "
				+ " where  itemStock.itemStockStatus='InStock' and itemStock.recordType<>'D' and itemStock.quantityOnHand>0 and pharmacyLocationUser.userId.userID=:userID and patPreItemDetail.prescribedItemId=:prescribedItemId and SUBSTRING(CAST(itemStock.expiryDate AS string), 1, 10)>'"+objSimpleDateFormat.format(new Date())+"'"+whereClasue+" order by robotInfo.robotId desc";
		objPatientDispensedItemsTOList = (List<PatientDispensedItemsTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getUserId()).setParameter("prescribedItemId", payloadBean.getPrescribedItemId())
				.setResultTransformer(Transformers.aliasToBean(PatientDispensedItemsTO.class)).list();
		
		
		
		sqlQuery ="select patPreItemDetail.prescribedItemId as prescribedItemId,itemStock.itemStockId as itemStockId,itemStock.lotNo as lotNo,itemStock.expiryDate as expiryDate,"
				+ "itemStock.item.itemName as itemName,itemStock.quantityOnHand as quantityOnHand,patPreItemDetail.transactionCount as prescribedItemTransactionCount,coalesce(robotInfo.robotName,'Shelf') as robotName"
				+ " from PatientPrescribedItemEntity patPreItemDetail"
				+ " left join patPreItemDetail.item item"
				+ " inner join ItemStockEntity itemStock on itemStock.item.itemId=item.itemId"
				+ " left join itemStock.robot robotInfo"
				//+ " left join itemDetail."
				//+ " inner join ItemStockEntity itemStock on itemStock.item.itemId=patPreItemDetail.item.itemId"
				+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on itemStock.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId "
				+ " where  itemStock.itemStockStatus='InStock' and itemStock.quantityOnHand>0 and itemStock.recordType<>'D' and pharmacyLocationUser.userId.userID=:userID and patPreItemDetail.prescribedItemId=:prescribedItemId and SUBSTRING(CAST(itemStock.expiryDate AS string), 1, 10)>'"+objSimpleDateFormat.format(new Date())+"'"+whereClasue+" order by robotInfo.robotId desc";
		objPatientDispensedItemsTOMainList = (List<PatientDispensedItemsTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getUserId()).setParameter("prescribedItemId", payloadBean.getPrescribedItemId())
				.setResultTransformer(Transformers.aliasToBean(PatientDispensedItemsTO.class)).list();
	
		boolean flag=true;
		for(PatientDispensedItemsTO objItemOrderEntityTO : objPatientDispensedItemsTOMainList)
		{
			flag=true;
			for(PatientDispensedItemsTO objItemOrderEntityTO1 : objPatientDispensedItemsTOList)
			{
				if(objItemOrderEntityTO.getItemStockId().equals(objItemOrderEntityTO1.getItemStockId())) {
					flag=false;
					break;
				}
			}
			if(flag) {
				objPatientDispensedItemsTOList.add(objPatientDispensedItemsTOList.size(), objItemOrderEntityTO);
			}
		}
		
		return objPatientDispensedItemsTOList;
	
	}

	@Override
	public PatientDispensedItemEntity fetchPatientDispensedItemEntityById(Long dispensedItemId) {
		return entityManager.find(PatientDispensedItemEntity.class, dispensedItemId);
		
	}

	@Override
	public boolean updatePatientDispensedItemEntity(PatientDispensedItemEntity objPatientDispensedItemEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.merge(objPatientDispensedItemEntity);
		return true;
	}

	@Override
	public boolean addPatientDispensedItemEntity(PatientDispensedItemEntity objPatientDispensedItemEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.persist(objPatientDispensedItemEntity);
		return true;
	}

	@Override
	public PatientPrescribedItemEntity fetchPrescribedItemEntityById(Long id) {
		return entityManager.find(PatientPrescribedItemEntity.class, id);
	}

	@Override
	public boolean updatePrescribedItemEntity(PatientPrescribedItemEntity objPatientPrescribedItemEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.merge(objPatientPrescribedItemEntity);
		return true;
	}

	@Override
	public List<PatientPrescriptionEntityTO> fetchPrescribedItemStatus(Long prescriptionId) {
		List<PatientPrescriptionEntityTO> objPatientPrescriptionEntityTOList = null;
		String sqlQuery="";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select patPres.patientPrescriptionId as patientPrescriptionId"
				+ " from PatientPrescribedItemEntity patientPrescribedItem left join patientPrescribedItem.patientPrescription patPres where patPres.patientPrescriptionId =:patientPrescriptionId and patientPrescribedItem.prescribedStatus!='Completed' ";
		objPatientPrescriptionEntityTOList = (List<PatientPrescriptionEntityTO>) session.createQuery(sqlQuery).setParameter("patientPrescriptionId", prescriptionId)
				.setResultTransformer(Transformers.aliasToBean(PatientPrescriptionEntityTO.class)).list();

		return objPatientPrescriptionEntityTOList;
	}

	@Override
	public TransactionData fetchTransactionDataOfPatientPrescription(Long patientPrescriptionId) {


		TransactionData transactionData = null;
		String sqlQuery = "";
		
			Session session = (Session) entityManager.getDelegate();
			sqlQuery = "select table.transactionCount as transactionCount,table.recordType as recordType"
					+ " from  PatientPrescriptionEntity table where table.patientPrescriptionId=:patientPrescriptionId";
			transactionData = (TransactionData) session.createQuery(sqlQuery).setParameter("patientPrescriptionId", patientPrescriptionId)
					.setResultTransformer(Transformers.aliasToBean(TransactionData.class)).list().get(0);
		
		return transactionData;
	
	
	}

	@Override
	public PatientPrescriptionEntity fetchPatientPrescriptionEntityById(Long id) {
		return entityManager.find(PatientPrescriptionEntity.class, id);
	}

	@Override
	public boolean updatePatientPrescriptionEntity(PatientPrescriptionEntity objPatientPrescriptionEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.merge(objPatientPrescriptionEntity);
		return true;
	}

	@Override
	public boolean deletePatientDispensedItems(Long id) {
		String sqlQuery="";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "delete from PatientDispensedItemEntity table where table.dispensedItemId=:dispensedItemId";
		int result=session.createQuery(sqlQuery).setParameter("dispensedItemId", id).executeUpdate();
		if(result>0)
		return true;
		else
			return false;
	}
	
	@Override
	public PatientEntityTO getGenderDetailOfWorkStation(PayloadBean PayloadBean, HttpServletRequest request) {
		try {
			return (PatientEntityTO) ((Session) entityManager.getDelegate()).createQuery(
					"select workStation.gender as gender,workStation.robotDispensing as robotDispensing,"
					+ "concat(workStation.workStationName,'(',concat(pharmacyLocationUser.userId.firstName,coalesce(pharmacyLocationUser.userId.lastName,'')),')') as workStationName,"
					+ "workStation.pharmacyLocation.pharmacyLocationName as pharmacyLocationName"
					+ " from WorksStationAssignmentEntity workStation"
							+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on workStation.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId "
							+ " where workStation.recordType<>'D'"
							+ " and pharmacyLocationUser.userId.userID=:userID and workStation.workStationStatus='Active' and workStation.workStationIpAdd=:workStationIpAdd")
					.setParameter("userID", PayloadBean.getId()).setParameter("workStationIpAdd", request.getRemoteAddr())
					.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class))
					.getSingleResult();
		} catch (NoResultException ex) {
			return null;
		}
	}


	@Override
	public List<DispenseMedicationsTO> getPendingSavedDraftPetientDetails(PayloadBean payloadBean) {
		SimpleDateFormat objSimpleDateFormat= new SimpleDateFormat("yyyy-MM-dd");
		List<DispenseMedicationsTO> objDispenseMedicationsTOList = null;
		List<DispenseMedicationsTO> objMainDispenseMedicationsTOList=new ArrayList<>();
		DispenseMedicationsTO objDispenseMedicationsTO=new DispenseMedicationsTO();
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		String dateFormat = messageSource.getMessage("dateFormat", null, "", Locale.US);
		sqlQuery ="select count(patientPrescriptionDetail.prescriptionStatus) as noOfPatient"
				+ " from PatientPrescriptionEntity patientPrescriptionDetail"
				+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
				+ " left join patientEncounterDetail.patient patientDetail"
				+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on patientPrescriptionDetail.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId"
				+ " where patientEncounterDetail.recordType<>'D' and pharmacyLocationUser.userId.userID=:userID and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getSearchParameter()+") and"
				+ " patientPrescriptionDetail.prescriptionStatus='Pending' and (patientPrescriptionDetail.troubleStatus!='Trouble' or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)='"+objSimpleDateFormat.format(new Date())+"'";
		objDispenseMedicationsTOList = (List<DispenseMedicationsTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getId())
				.setResultTransformer(Transformers.aliasToBean(DispenseMedicationsTO.class)).list();
		for(DispenseMedicationsTO localDispenseMedicationsTO:objDispenseMedicationsTOList) {
			objDispenseMedicationsTO.setNoOfTodayPatient(localDispenseMedicationsTO.getNoOfPatient());
			objDispenseMedicationsTO.setTotalSum(localDispenseMedicationsTO.getNoOfPatient());
		}
		sqlQuery ="select count(patientPrescriptionDetail.prescriptionStatus) as noOfPatient"
				+ " from PatientPrescriptionEntity patientPrescriptionDetail"
				+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
				+ " left join patientEncounterDetail.patient patientDetail"
				+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on patientPrescriptionDetail.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId"
				+ " where patientEncounterDetail.recordType<>'D' and pharmacyLocationUser.userId.userID=:userID and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getSearchParameter()+") and"
				+ " patientPrescriptionDetail.prescriptionStatus='Pending' and (patientPrescriptionDetail.troubleStatus!='Trouble' or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)<'"+objSimpleDateFormat.format(new Date())+"'";
		objDispenseMedicationsTOList = (List<DispenseMedicationsTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getId())
				.setResultTransformer(Transformers.aliasToBean(DispenseMedicationsTO.class)).list();
		for(DispenseMedicationsTO localDispenseMedicationsTO:objDispenseMedicationsTOList) {
			objDispenseMedicationsTO.setNoOfPreviousPatient(localDispenseMedicationsTO.getNoOfPatient());
			objDispenseMedicationsTO.setTotalSum(objDispenseMedicationsTO.getTotalSum()==null?0:objDispenseMedicationsTO.getTotalSum()+localDispenseMedicationsTO.getNoOfPatient());
		}
		sqlQuery ="select count(patientPrescriptionDetail.prescriptionStatus) as noOfPatient"
				+ " from PatientPrescriptionEntity patientPrescriptionDetail"
				+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
				+ " left join patientEncounterDetail.patient patientDetail"
				+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on patientPrescriptionDetail.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId"
				+ " where patientEncounterDetail.recordType<>'D' and pharmacyLocationUser.userId.userID=:userID and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getSearchParameter()+") and"
				+ " patientPrescriptionDetail.prescriptionStatus='Pending' and (patientPrescriptionDetail.troubleStatus!='Trouble' or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)>'"+objSimpleDateFormat.format(new Date())+"'";
		objDispenseMedicationsTOList = (List<DispenseMedicationsTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getId())
				.setResultTransformer(Transformers.aliasToBean(DispenseMedicationsTO.class)).list();
		for(DispenseMedicationsTO localDispenseMedicationsTO:objDispenseMedicationsTOList) {
			objDispenseMedicationsTO.setNoOfFuturePatient(localDispenseMedicationsTO.getNoOfPatient());
			objDispenseMedicationsTO.setTotalSum(objDispenseMedicationsTO.getTotalSum()==null?0:objDispenseMedicationsTO.getTotalSum()+localDispenseMedicationsTO.getNoOfPatient());
		}
		if(objDispenseMedicationsTO.getNoOfPreviousPatient()!=null || objDispenseMedicationsTO.getNoOfTodayPatient() !=null ||
				objDispenseMedicationsTO.getNoOfFuturePatient()!=null) {
			objDispenseMedicationsTO.setUrlLink("pending");
			objDispenseMedicationsTO.setPatientStatus("Rx To Do");
			objMainDispenseMedicationsTOList.add(objDispenseMedicationsTO);
		}
		
		objDispenseMedicationsTO=new DispenseMedicationsTO();
		
		sqlQuery ="select count(patientPrescriptionDetail.prescriptionStatus) as noOfPatient"
				+ " from PatientPrescriptionEntity patientPrescriptionDetail"
				+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
				+ " left join patientEncounterDetail.patient patientDetail"
				+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on patientPrescriptionDetail.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId"
				+ " where patientEncounterDetail.recordType<>'D' and pharmacyLocationUser.userId.userID=:userID and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getSearchParameter()+") and"
				+ " patientPrescriptionDetail.prescriptionStatus='Saved Draft' and (patientPrescriptionDetail.troubleStatus!='Trouble' or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)='"+objSimpleDateFormat.format(new Date())+"'";
		objDispenseMedicationsTOList = (List<DispenseMedicationsTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getId())
				.setResultTransformer(Transformers.aliasToBean(DispenseMedicationsTO.class)).list();
		for(DispenseMedicationsTO localDispenseMedicationsTO:objDispenseMedicationsTOList) {
			objDispenseMedicationsTO.setNoOfTodayPatient(localDispenseMedicationsTO.getNoOfPatient());
			objDispenseMedicationsTO.setTotalSum(localDispenseMedicationsTO.getNoOfPatient());
		}
		sqlQuery ="select count(patientPrescriptionDetail.prescriptionStatus) as noOfPatient"
				+ " from PatientPrescriptionEntity patientPrescriptionDetail"
				+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
				+ " left join patientEncounterDetail.patient patientDetail"
				+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on patientPrescriptionDetail.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId"
				+ " where patientEncounterDetail.recordType<>'D' and pharmacyLocationUser.userId.userID=:userID and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getSearchParameter()+") and"
				+ " patientPrescriptionDetail.prescriptionStatus='Saved Draft' and (patientPrescriptionDetail.troubleStatus!='Trouble' or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)<'"+objSimpleDateFormat.format(new Date())+"'";
		objDispenseMedicationsTOList = (List<DispenseMedicationsTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getId())
				.setResultTransformer(Transformers.aliasToBean(DispenseMedicationsTO.class)).list();
		for(DispenseMedicationsTO localDispenseMedicationsTO:objDispenseMedicationsTOList) {
			objDispenseMedicationsTO.setNoOfPreviousPatient(localDispenseMedicationsTO.getNoOfPatient());
			objDispenseMedicationsTO.setTotalSum(objDispenseMedicationsTO.getTotalSum()==null?0:objDispenseMedicationsTO.getTotalSum()+localDispenseMedicationsTO.getNoOfPatient());
		}
		sqlQuery ="select count(patientPrescriptionDetail.prescriptionStatus) as noOfPatient"
				+ " from PatientPrescriptionEntity patientPrescriptionDetail"
				+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
				+ " left join patientEncounterDetail.patient patientDetail"
				+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on patientPrescriptionDetail.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId"
				+ " where patientEncounterDetail.recordType<>'D' and pharmacyLocationUser.userId.userID=:userID and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getSearchParameter()+") and"
				+ " patientPrescriptionDetail.prescriptionStatus='Saved Draft' and (patientPrescriptionDetail.troubleStatus!='Trouble' or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)>'"+objSimpleDateFormat.format(new Date())+"'";
		objDispenseMedicationsTOList = (List<DispenseMedicationsTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getId())
				.setResultTransformer(Transformers.aliasToBean(DispenseMedicationsTO.class)).list();
		for(DispenseMedicationsTO localDispenseMedicationsTO:objDispenseMedicationsTOList) {
			objDispenseMedicationsTO.setNoOfFuturePatient(localDispenseMedicationsTO.getNoOfPatient());
			objDispenseMedicationsTO.setTotalSum(objDispenseMedicationsTO.getTotalSum()==null?0:objDispenseMedicationsTO.getTotalSum()+localDispenseMedicationsTO.getNoOfPatient());
		}
		if(objDispenseMedicationsTO.getNoOfPreviousPatient()!=null || objDispenseMedicationsTO.getNoOfTodayPatient() !=null ||
				objDispenseMedicationsTO.getNoOfFuturePatient()!=null){
			objDispenseMedicationsTO.setUrlLink("saved-draft");
			objDispenseMedicationsTO.setPatientStatus("Rx In Progress");
			objMainDispenseMedicationsTOList.add(objDispenseMedicationsTO);
		}
		
		
		
		return objMainDispenseMedicationsTOList;
	
	}

	@Override
	public List<PatientEntityTO> getPatientDetailsByPrescriptionStatus(PayloadBean payloadBean) {
		SimpleDateFormat objSimpleDateFormat= new SimpleDateFormat("yyyy-MM-dd");
		List<PatientEntityTO> objPatientEntityTOList = null;
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		String dateFormat = messageSource.getMessage("dateFormat", null, "", Locale.US);
		if(payloadBean.getSearchParameter().equalsIgnoreCase("today-pending")) {
			sqlQuery ="select patientDetail.patientId as patientId,patientDetail.patientNo as patientNo,patientPrescriptionDetail.queueNo as queueNo,concat(patientDetail.firstName,' ',coalesce(patientDetail.lastName,'')) as patientName,patientDetail.birthDate as birthDate"
					+ ",patientDetail.gender as gender,patientDetail.homePhone as homePhone,patientDetail.mobilePhone as mobilePhone,patientDetail.patientStatus as patientStatus,patientDetail.transactionCount as transactionCount"
					+ ",patientPrescriptionDetail.prescriptionNo as prescriptionNo,patientPrescriptionDetail.prescriptionDateTime as prescriptionDateTime,patientEncounterDetail.patientEncounterId as patientEncounterId"
					+ " from PatientPrescriptionEntity patientPrescriptionDetail"
					+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
					+ " left join patientEncounterDetail.patient patientDetail"
					+ " where patientEncounterDetail.recordType<>'D' and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getCustomParameter()+") and"
					+ " patientPrescriptionDetail.prescriptionStatus='Pending'  and (patientPrescriptionDetail.troubleStatus!='Trouble' or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)='"+objSimpleDateFormat.format(new Date())+"'";
			objPatientEntityTOList = (List<PatientEntityTO>) session.createQuery(sqlQuery)
					.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();
			
		}
		if(payloadBean.getSearchParameter().equalsIgnoreCase("previous-pending")) {
			sqlQuery ="select patientDetail.patientId as patientId,patientDetail.patientNo as patientNo,patientPrescriptionDetail.queueNo as queueNo,concat(patientDetail.firstName,' ',coalesce(patientDetail.lastName,'')) as patientName,patientDetail.birthDate as birthDate"
					+ ",patientDetail.gender as gender,patientDetail.homePhone as homePhone,patientDetail.mobilePhone as mobilePhone,patientDetail.patientStatus as patientStatus,patientDetail.transactionCount as transactionCount"
					+ ",patientPrescriptionDetail.prescriptionNo as prescriptionNo,patientPrescriptionDetail.prescriptionDateTime as prescriptionDateTime,patientEncounterDetail.patientEncounterId as patientEncounterId"
					+ " from PatientPrescriptionEntity patientPrescriptionDetail"
					+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
					+ " left join patientEncounterDetail.patient patientDetail"
					+ " where patientEncounterDetail.recordType<>'D' and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getCustomParameter()+") and"
					+ " patientPrescriptionDetail.prescriptionStatus='Pending'  and (patientPrescriptionDetail.troubleStatus!='Trouble' or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)<'"+objSimpleDateFormat.format(new Date())+"'";
			objPatientEntityTOList = (List<PatientEntityTO>) session.createQuery(sqlQuery)
					.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();
			
		}
		if(payloadBean.getSearchParameter().equalsIgnoreCase("future-pending")) {
			sqlQuery ="select patientDetail.patientId as patientId,patientDetail.patientNo as patientNo,patientPrescriptionDetail.queueNo as queueNo,concat(patientDetail.firstName,' ',coalesce(patientDetail.lastName,'')) as patientName,patientDetail.birthDate as birthDate"
					+ ",patientDetail.gender as gender,patientDetail.homePhone as homePhone,patientDetail.mobilePhone as mobilePhone,patientDetail.patientStatus as patientStatus,patientDetail.transactionCount as transactionCount"
					+ ",patientPrescriptionDetail.prescriptionNo as prescriptionNo,patientPrescriptionDetail.prescriptionDateTime as prescriptionDateTime,patientEncounterDetail.patientEncounterId as patientEncounterId"
					+ " from PatientPrescriptionEntity patientPrescriptionDetail"
					+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
					+ " left join patientEncounterDetail.patient patientDetail"
					+ " where patientEncounterDetail.recordType<>'D' and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getCustomParameter()+") and"
					+ " patientPrescriptionDetail.prescriptionStatus='Pending' and (patientPrescriptionDetail.troubleStatus!='Trouble' or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)>'"+objSimpleDateFormat.format(new Date())+"'";
			objPatientEntityTOList = (List<PatientEntityTO>) session.createQuery(sqlQuery)
					.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();
			
		}
		
		
		if(payloadBean.getSearchParameter().equalsIgnoreCase("today-saved-draft")) {
			sqlQuery ="select patientDetail.patientId as patientId,patientDetail.patientNo as patientNo,patientPrescriptionDetail.queueNo as queueNo,concat(patientDetail.firstName,' ',coalesce(patientDetail.lastName,'')) as patientName,patientDetail.birthDate as birthDate"
					+ ",patientDetail.gender as gender,patientDetail.homePhone as homePhone,patientDetail.mobilePhone as mobilePhone,patientDetail.patientStatus as patientStatus,patientDetail.transactionCount as transactionCount"
					+ ",patientPrescriptionDetail.prescriptionNo as prescriptionNo,patientPrescriptionDetail.prescriptionDateTime as prescriptionDateTime,patientEncounterDetail.patientEncounterId as patientEncounterId"
					+ " from PatientPrescriptionEntity patientPrescriptionDetail"
					+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
					+ " left join patientEncounterDetail.patient patientDetail"
					+ " where patientEncounterDetail.recordType<>'D' and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getCustomParameter()+") and"
					+ " patientPrescriptionDetail.prescriptionStatus='Saved Draft' and (patientPrescriptionDetail.troubleStatus!='Trouble' or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)='"+objSimpleDateFormat.format(new Date())+"'";
			objPatientEntityTOList = (List<PatientEntityTO>) session.createQuery(sqlQuery)
			.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();
		}
		
		if(payloadBean.getSearchParameter().equalsIgnoreCase("previous-saved-draft")) {
			sqlQuery ="select patientDetail.patientId as patientId,patientDetail.patientNo as patientNo,patientPrescriptionDetail.queueNo as queueNo,concat(patientDetail.firstName,' ',coalesce(patientDetail.lastName,'')) as patientName,patientDetail.birthDate as birthDate"
					+ ",patientDetail.gender as gender,patientDetail.homePhone as homePhone,patientDetail.mobilePhone as mobilePhone,patientDetail.patientStatus as patientStatus,patientDetail.transactionCount as transactionCount"
					+ ",patientPrescriptionDetail.prescriptionNo as prescriptionNo,patientPrescriptionDetail.prescriptionDateTime as prescriptionDateTime,patientEncounterDetail.patientEncounterId as patientEncounterId"
					+ " from PatientPrescriptionEntity patientPrescriptionDetail"
					+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
					+ " left join patientEncounterDetail.patient patientDetail"
					+ " where patientEncounterDetail.recordType<>'D' and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getCustomParameter()+") and"
					+ " patientPrescriptionDetail.prescriptionStatus='Saved Draft' and (patientPrescriptionDetail.troubleStatus!='Trouble' or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)<'"+objSimpleDateFormat.format(new Date())+"'";
			objPatientEntityTOList = (List<PatientEntityTO>) session.createQuery(sqlQuery)
			.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();
		}
		
		if(payloadBean.getSearchParameter().equalsIgnoreCase("future-saved-draft")) {
			sqlQuery ="select patientDetail.patientId as patientId,patientDetail.patientNo as patientNo,patientPrescriptionDetail.queueNo as queueNo,concat(patientDetail.firstName,' ',coalesce(patientDetail.lastName,'')) as patientName,patientDetail.birthDate as birthDate"
					+ ",patientDetail.gender as gender,patientDetail.homePhone as homePhone,patientDetail.mobilePhone as mobilePhone,patientDetail.patientStatus as patientStatus,patientDetail.transactionCount as transactionCount"
					+ ",patientPrescriptionDetail.prescriptionNo as prescriptionNo,patientPrescriptionDetail.prescriptionDateTime as prescriptionDateTime,patientEncounterDetail.patientEncounterId as patientEncounterId"
					+ " from PatientPrescriptionEntity patientPrescriptionDetail"
					+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
					+ " left join patientEncounterDetail.patient patientDetail"
					+ " where patientEncounterDetail.recordType<>'D' and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender in ("+payloadBean.getCustomParameter()+") and"
					+ "  patientPrescriptionDetail.prescriptionStatus='Saved Draft' and (patientPrescriptionDetail.troubleStatus!='Trouble'  or patientPrescriptionDetail.troubleStatus is null or patientPrescriptionDetail.troubleStatus='Resolved') and patientPrescriptionDetail.recordType<>'D' and SUBSTRING(CAST(patientPrescriptionDetail.prescriptionDateTime AS string), 1, 10)>'"+objSimpleDateFormat.format(new Date())+"'";
			objPatientEntityTOList = (List<PatientEntityTO>) session.createQuery(sqlQuery)
			.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();
		}
		
		
		return objPatientEntityTOList;
	
	}

	@Override
	public List<PatientEntityTO> getPatientDetailsUnderProccesing(PayloadBean payloadBean) {
		List<PatientEntityTO> objPatientEntityTOList = null;
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		/*sqlQuery ="select patientDetail.patientId as patientId,patientDetail.patientNo as patientNo,patientDetail.firstName as firstName,patientDetail.lastName as lastName,patientDetail.birthDate as birthDate"
					+ ",patientDetail.gender as gender,patientDetail.homePhone as homePhone,patientDetail.mobilePhone as mobilePhone,patientDetail.patientStatus as patientStatus,patientDetail.transactionCount as transactionCount"
					+ " from PatientPrescriptionEntity patientPrescriptionDetail"
					+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
					+ " left join patientEncounterDetail.patient patientDetail"
					+ " where patientEncounterDetail.recordType<>'D' and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender='MALE' and"
					+ " patientPrescriptionDetail.prescriptionStatus='Finalized' and patientPrescriptionDetail.recordType<>'D'";
			objPatientEntityTOList = (List<PatientEntityTO>) session.createQuery(sqlQuery)
					.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();*/
			sqlQuery="select patientpre0_.PATIENT_PRESCRIPTION_ID as patientPrescriptionId,patientenc1_.PATIENT_ENCOUNTER_ID as patientEncounterId,patientent2_.PATIENT_ID as patientId, patientent2_.PATIENT_NO as patientNo,patientpre0_.queue_No as queueNo,"
					+ " (patientent2_.FIRST_NAME+' '+coalesce(patientent2_.LAST_NAME, '')) as patientName, patientent2_.GENDER as gender ,datediff(hh,PRESCRIPTION_DATE_TIME,getdate()) as waitingHours"
					+ ",patientpre0_.prescription_No as prescriptionNo,patientpre0_.prescription_Date_Time as prescriptionDateTime"
					+ " from patient_prescriptions patientpre0_ "
					+ "left outer join patient_encounters patientenc1_ on patientpre0_.PATIENT_ENCOUNTER_ID=patientenc1_.PATIENT_ENCOUNTER_ID "
					+ "left outer join patients patientent2_ on patientenc1_.PATIENT_ID=patientent2_.PATIENT_ID "
					+ "where patientenc1_.RECORD_TYPE<>'D' and patientent2_.RECORD_TYPE<>'D' and patientent2_.PATIENT_STATUS='Active'"
					+ " and patientpre0_.PHARMACY_LOCATION_ID=(select PHARMACY_LOCATION_ID from pharmacy_location_users where USER_ID="+payloadBean.getId()+")"
					+ " and patientent2_.GENDER in ("+payloadBean.getSearchParameter()+") and patientpre0_.PRESCRIPTION_STATUS='Finalized' and (patientpre0_.TROUBLE_STATUS!='Trouble' or patientpre0_.TROUBLE_STATUS is null or patientpre0_.TROUBLE_STATUS='Resolved') and patientpre0_.RECORD_TYPE<>'D'";
			objPatientEntityTOList=session.createNativeQuery(sqlQuery)
					.addScalar("patientPrescriptionId", StandardBasicTypes.LONG)
					.addScalar("patientEncounterId", StandardBasicTypes.LONG)
			.addScalar("patientId", StandardBasicTypes.LONG)
			.addScalar("patientNo", StandardBasicTypes.STRING)
			.addScalar("patientName", StandardBasicTypes.STRING)
			.addScalar("gender", StandardBasicTypes.STRING)
			.addScalar("waitingHours", StandardBasicTypes.LONG)
			.addScalar("prescriptionNo", StandardBasicTypes.STRING)
			.addScalar("prescriptionDateTime", StandardBasicTypes.DATE)
			.addScalar("queueNo", StandardBasicTypes.STRING)
			.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();
		
		
		return objPatientEntityTOList;
	
	}

	@Override
	public List<PatientEntityTO> getPatientDetailsReadyToVerified(PayloadBean payloadBean) {
		List<PatientEntityTO> objPatientEntityTOList = null;
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		/*sqlQuery ="select patientDetail.patientId as patientId,patientDetail.patientNo as patientNo,patientDetail.firstName as firstName,patientDetail.lastName as lastName,patientDetail.birthDate as birthDate"
					+ ",patientDetail.gender as gender,patientDetail.homePhone as homePhone,patientDetail.mobilePhone as mobilePhone,patientDetail.patientStatus as patientStatus,patientDetail.transactionCount as transactionCount"
					+ " from PatientPrescriptionEntity patientPrescriptionDetail"
					+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
					+ " left join patientEncounterDetail.patient patientDetail"
					+ " where patientEncounterDetail.recordType<>'D' and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender='MALE' and"
					+ " patientPrescriptionDetail.prescriptionStatus='processed' and patientPrescriptionDetail.recordType<>'D'";
			objPatientEntityTOList = (List<PatientEntityTO>) session.createQuery(sqlQuery)
					.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();*/
			
			sqlQuery="select patientpre0_.PATIENT_PRESCRIPTION_ID as patientPrescriptionId,patientenc1_.PATIENT_ENCOUNTER_ID as patientEncounterId, patientent2_.PATIENT_NO as patientNo,patientpre0_.queue_No as queueNo,"
					+ " (patientent2_.FIRST_NAME+' '+coalesce(patientent2_.LAST_NAME, '')) as patientName, patientent2_.GENDER as gender ,datediff(hh,PRESCRIPTION_DATE_TIME,getdate()) as waitingHours"
					+ ",patientpre0_.prescription_No as prescriptionNo,patientpre0_.prescription_Date_Time as prescriptionDateTime"
					+ " from patient_prescriptions patientpre0_ "
					+ "left outer join patient_encounters patientenc1_ on patientpre0_.PATIENT_ENCOUNTER_ID=patientenc1_.PATIENT_ENCOUNTER_ID "
					+ "left outer join patients patientent2_ on patientenc1_.PATIENT_ID=patientent2_.PATIENT_ID "
					+ "where patientenc1_.RECORD_TYPE<>'D' and patientent2_.RECORD_TYPE<>'D' and patientent2_.PATIENT_STATUS='Active'"
					+ " and patientpre0_.PHARMACY_LOCATION_ID=(select PHARMACY_LOCATION_ID from pharmacy_location_users where USER_ID="+payloadBean.getId()+")"
					+ " and patientent2_.GENDER in ("+payloadBean.getSearchParameter()+") and patientpre0_.PRESCRIPTION_STATUS='Processed' and (patientpre0_.TROUBLE_STATUS!='Trouble' or patientpre0_.TROUBLE_STATUS is null or patientpre0_.TROUBLE_STATUS='Resolved') and patientpre0_.RECORD_TYPE<>'D'";
			objPatientEntityTOList=session.createNativeQuery(sqlQuery)
					.addScalar("patientPrescriptionId", StandardBasicTypes.LONG)
			.addScalar("patientEncounterId", StandardBasicTypes.LONG)
			.addScalar("patientNo", StandardBasicTypes.STRING)
			.addScalar("patientName", StandardBasicTypes.STRING)
			.addScalar("gender", StandardBasicTypes.STRING)
			.addScalar("waitingHours", StandardBasicTypes.LONG)
			.addScalar("prescriptionNo", StandardBasicTypes.STRING)
			.addScalar("prescriptionDateTime", StandardBasicTypes.DATE)
			.addScalar("queueNo", StandardBasicTypes.STRING)
			.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();
		
		return objPatientEntityTOList;
	
	}

	@Override
	public List<PatientEntityTO> getPatientDetailsReadyToDispensed(PayloadBean payloadBean) {
		List<PatientEntityTO> objPatientEntityTOList = null;
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		/*sqlQuery ="select patientDetail.patientId as patientId,patientDetail.patientNo as patientNo,patientDetail.firstName as firstName,patientDetail.lastName as lastName,patientDetail.birthDate as birthDate"
					+ ",patientDetail.gender as gender,patientDetail.homePhone as homePhone,patientDetail.mobilePhone as mobilePhone,patientDetail.patientStatus as patientStatus,patientDetail.transactionCount as transactionCount"
					+ " from PatientPrescriptionEntity patientPrescriptionDetail"
					+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
					+ " left join patientEncounterDetail.patient patientDetail"
					+ " where patientEncounterDetail.recordType<>'D' and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender='MALE' and"
					+ " patientPrescriptionDetail.prescriptionStatus='Verified' and patientPrescriptionDetail.recordType<>'D'";
			objPatientEntityTOList = (List<PatientEntityTO>) session.createQuery(sqlQuery)
					.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();*/
			
			sqlQuery="select patientenc1_.PATIENT_ENCOUNTER_ID as patientEncounterId,patientent2_.PATIENT_ID as patientId, patientent2_.PATIENT_NO as patientNo,patientpre0_.queue_No as queueNo,"
					+ " (patientent2_.FIRST_NAME+' '+coalesce(patientent2_.LAST_NAME, '')) as patientName, patientent2_.GENDER as gender ,datediff(hh,PRESCRIPTION_DATE_TIME,getdate()) as waitingHours"
					+ ",patientpre0_.prescription_No as prescriptionNo,patientpre0_.prescription_Date_Time as prescriptionDateTime,"
					+ "patientpre0_.PATIENT_PRESCRIPTION_ID as patientPrescriptionId,patientpre0_.transaction_Count as transactionCount" 
					+ " from patient_prescriptions patientpre0_ "
					+ "left outer join patient_encounters patientenc1_ on patientpre0_.PATIENT_ENCOUNTER_ID=patientenc1_.PATIENT_ENCOUNTER_ID "
					+ "left outer join patients patientent2_ on patientenc1_.PATIENT_ID=patientent2_.PATIENT_ID "
					+ "where patientenc1_.RECORD_TYPE<>'D' and patientent2_.RECORD_TYPE<>'D' and patientent2_.PATIENT_STATUS='Active'"
					+ " and patientpre0_.PHARMACY_LOCATION_ID=(select PHARMACY_LOCATION_ID from pharmacy_location_users where USER_ID="+payloadBean.getId()+")"
					+ " and patientent2_.GENDER in ("+payloadBean.getSearchParameter()+") and patientpre0_.PRESCRIPTION_STATUS='Verified'  and (patientpre0_.TROUBLE_STATUS!='Trouble' or patientpre0_.TROUBLE_STATUS is null or patientpre0_.TROUBLE_STATUS='Resolved') and patientpre0_.RECORD_TYPE<>'D'";
			objPatientEntityTOList=session.createNativeQuery(sqlQuery)
					.addScalar("patientEncounterId", StandardBasicTypes.LONG)
			.addScalar("patientId", StandardBasicTypes.LONG)
			.addScalar("patientNo", StandardBasicTypes.STRING)
			.addScalar("patientName", StandardBasicTypes.STRING)
			.addScalar("gender", StandardBasicTypes.STRING)
			.addScalar("waitingHours", StandardBasicTypes.LONG)
			.addScalar("prescriptionNo", StandardBasicTypes.STRING)
			.addScalar("prescriptionDateTime", StandardBasicTypes.DATE)
			.addScalar("queueNo", StandardBasicTypes.STRING)
			.addScalar("patientPrescriptionId", StandardBasicTypes.LONG)
			.addScalar("transactionCount", StandardBasicTypes.LONG)
			.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();
		
		return objPatientEntityTOList;
	
	}

	@Override
	public List<PatientEntityTO> getTroubledPatientDetails(PayloadBean payloadBean) {
		List<PatientEntityTO> objPatientEntityTOList = null;
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		/*sqlQuery ="select patientDetail.patientId as patientId,patientDetail.patientNo as patientNo,concat(patientDetail.firstName,' ',COALESCE(patientDetail.lastName,'')) as patientName"
					+ ",patientDetail.gender as gender"
					+ " from PatientPrescriptionEntity patientPrescriptionDetail"
					+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
					+ " left join patientEncounterDetail.patient patientDetail"
					+ " where patientEncounterDetail.recordType<>'D' and patientDetail.recordType<>'D' and patientDetail.patientStatus='Active' and patientDetail.gender='MALE' and"
					+ " patientPrescriptionDetail.prescriptionStatus='Troubled' and patientPrescriptionDetail.recordType<>'D'";
			objPatientEntityTOList = (List<PatientEntityTO>) session.createQuery(sqlQuery)
					.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();*/
			sqlQuery="select patientenc1_.PATIENT_ENCOUNTER_ID as patientEncounterId,patientent2_.PATIENT_ID as patientId, patientent2_.PATIENT_NO as patientNo,patientpre0_.queue_No as queueNo,"
					+ " (patientent2_.FIRST_NAME+' '+coalesce(patientent2_.LAST_NAME, '')) as patientName, patientent2_.GENDER as gender ,datediff(hh,PRESCRIPTION_DATE_TIME,getdate()) as waitingHours"
					+ ",patientpre0_.prescription_No as prescriptionNo,patientpre0_.prescription_Date_Time as prescriptionDateTime"
					+ ",patientpre0_.TRANSACTION_COUNT as transactionCount,patientpre0_.PATIENT_PRESCRIPTION_ID as patientPrescriptionId"
					+ ",patientpre0_.TROUBLE_STATUS as troubleStatus,patientpre0_.TROUBLE_DATE_TIME as troubleDateTime,patientpre0_.TROUBLE_NOTES as troubleNotes"
					+ " from patient_prescriptions patientpre0_ "
					+ "left outer join patient_encounters patientenc1_ on patientpre0_.PATIENT_ENCOUNTER_ID=patientenc1_.PATIENT_ENCOUNTER_ID "
					+ "left outer join patients patientent2_ on patientenc1_.PATIENT_ID=patientent2_.PATIENT_ID "
					+ "where patientenc1_.RECORD_TYPE<>'D' and patientent2_.RECORD_TYPE<>'D' and patientent2_.PATIENT_STATUS='Active'"
					+ " and patientpre0_.PHARMACY_LOCATION_ID=(select PHARMACY_LOCATION_ID from pharmacy_location_users where USER_ID="+payloadBean.getId()+")"
					+ " and patientent2_.GENDER in ("+payloadBean.getSearchParameter()+")  and patientpre0_.TROUBLE_STATUS='Trouble' and patientpre0_.RECORD_TYPE<>'D'";
			objPatientEntityTOList=session.createNativeQuery(sqlQuery)
					.addScalar("patientEncounterId", StandardBasicTypes.LONG)
			.addScalar("patientId", StandardBasicTypes.LONG)
			.addScalar("patientNo", StandardBasicTypes.STRING)
			.addScalar("patientName", StandardBasicTypes.STRING)
			.addScalar("gender", StandardBasicTypes.STRING)
			.addScalar("waitingHours", StandardBasicTypes.LONG)
			.addScalar("prescriptionNo", StandardBasicTypes.STRING)
			.addScalar("prescriptionDateTime", StandardBasicTypes.DATE)
			.addScalar("queueNo", StandardBasicTypes.STRING)
			.addScalar("patientPrescriptionId", StandardBasicTypes.LONG)
			.addScalar("transactionCount", StandardBasicTypes.LONG)
			.addScalar("troubleDateTime", StandardBasicTypes.DATE)
			.addScalar("troubleStatus", StandardBasicTypes.STRING)
			.addScalar("troubleNotes", StandardBasicTypes.STRING)
			.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).list();
		
		return objPatientEntityTOList;
	
	}

	@Override
	public boolean deleteDispensedItemDetailsById(Long dispensedItemId) {
		String sqlQuery="";
		int count=0;
		Session session = (Session) entityManager.getDelegate();
		sqlQuery ="delete from PatientDispensedItemEntity"
				+ " where dispensedItemId=:dispensedItemId";
		 count=session.createQuery(sqlQuery).setParameter("dispensedItemId", dispensedItemId)
				.executeUpdate();
		 if(count>0)
			 return true;
		 else
			 return false;
	}

	@Override
	public PatientEntityTO getPatientAndPrescribedDetailsByEncounterId(Long encounterId) {
		String dateFormat = messageSource.getMessage("dateFormat", null, "", Locale.US);
		PatientEntityTO objPatientEntityTO = null;
		String sqlQuery="";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery ="select patientPrescriptionDetail.patientPrescriptionId as patientPrescriptionId,patientDetail.patientNo as patientNo,concat(patientDetail.firstName,' ',coalesce(patientDetail.lastName,'')) as patientName"
				+ ",patientPrescriptionDetail.prescriptionNo as prescriptionNo,patientPrescriptionDetail.prescriptionDateTime as prescriptionDateTime"
				+ ",patientPrescriptionDetail.transactionCount as transactionCount"
				+ " from PatientPrescriptionEntity patientPrescriptionDetail"
				+ " left join patientPrescriptionDetail.patientEncounter patientEncounterDetail"
				+ " left join patientEncounterDetail.patient patientDetail"
				+ " where patientEncounterDetail.patientEncounterId=:patientEncounterId";
		objPatientEntityTO = (PatientEntityTO) session.createQuery(sqlQuery).setParameter("patientEncounterId", encounterId)
				.setResultTransformer(Transformers.aliasToBean(PatientEntityTO.class)).getSingleResult();

		return objPatientEntityTO;
	}

	@Override
	public List<PatientDispensedItemsTO> getCompletedItemsDetailOfProcessedPatientPrescriptions(PayloadBean payloadBean) {
		SimpleDateFormat objSimpleDateFormat= new SimpleDateFormat("yyyy-MM-dd");
		List<PatientDispensedItemsTO> objPatientDispensedItemsTOList = null;
		List<PatientDispensedItemsTO> objPatientDispensedItemsTOMainList = null;
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		String dateFormat = messageSource.getMessage("dateFormat", null, "", Locale.US);
		sqlQuery ="select dispensedDetail.dispensedItemId as dispensedItemId,dispensedDetail.dispensedQuantity as dispensedQuantity,dispensedDetail.dispensedQuantity as dupliDispensedQuantity,itemStock.itemStockId as itemStockId,itemStock.lotNo as lotNo,itemStock.expiryDate as expiryDate,"
				+ "itemStock.item.itemName as itemName,itemStock.item.itemCode as itemCode,coalesce(dispensedDetail.dispensedItemStatus,'Pending') as dispensedItemStatus,"
				+ "dispensedDetail.transactionCount as dispensedTransactionCount,robotInfo.robotName as robotName"
				+ " from PatientDispensedItemEntity dispensedDetail"
				+ " right join dispensedDetail.patientPrescribedItem patPreItemDetail"
				+ " left join patPreItemDetail.patientPrescription patPresDetail"
				+ " left join patPresDetail.patientEncounter as patientEncounterDetail"
				+ " left join dispensedDetail.itemStock itemStock"
				+ " left join itemStock.robot robotInfo"
				+ " where  patientEncounterDetail.patientEncounterId=:patientEncounterId order by dispensedDetail.dispensedDateTime desc";
		objPatientDispensedItemsTOList = (List<PatientDispensedItemsTO>) session.createQuery(sqlQuery).setParameter("patientEncounterId", payloadBean.getId())
				.setResultTransformer(Transformers.aliasToBean(PatientDispensedItemsTO.class)).list();
		
		return objPatientDispensedItemsTOList;
	}

	@Override
	public boolean updateDispensedItemStatusPending(String dispensedIds) {
		String sqlQuery="";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery ="update PatientDispensedItemEntity dispensedDetail set dispensedDetail.dispensedItemStatus='Pending'"
				+" where dispensedDetail.dispensedItemId in ("+dispensedIds+")";
		if(session.createQuery(sqlQuery)
				 .executeUpdate()>0)
			return true;
		 return false;
	}
	@Override
	public ItemStockEntityTO fetchItemStockInfo(Long itemStockId) {
		try {
			return (ItemStockEntityTO) ((Session) entityManager.getDelegate()).createQuery(
					"select itemStock.itemPackSize.packSize as packSize,itemStock.unitCost as unitCost from ItemStockEntity itemStock"
							+ " where itemStock.recordType<>'D'"
							+ " and itemStock.itemStockId=:itemStockId")
					.setParameter("itemStockId", itemStockId)
					.setResultTransformer(Transformers.aliasToBean(ItemStockEntityTO.class))
					.getSingleResult();
		} catch (NoResultException ex) {
			return null;
		}
	}
	
	
	
}
