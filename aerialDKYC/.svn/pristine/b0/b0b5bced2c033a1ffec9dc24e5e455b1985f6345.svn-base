package com.edios.pms.controller;

import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.edios.cdf.controller.AbstractController;
import com.edios.cdf.util.DeleteRecords;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.validator.BaseResponse;
import com.edios.pms.bean.AssignPharmacyLocationScreenBean;
import com.edios.pms.bean.PharmacyLocationBean;
import com.edios.pms.bean.PharmacyLocationUserBean;
import com.edios.pms.entity.to.PharmacyLocationEntityTO;
import com.edios.pms.manager.AssignPharmacyLocationManager;






@RestController
public class AssignPharmacyLocationContoller extends AbstractController {
@Autowired
MessageSource messageSource;
@Autowired
AssignPharmacyLocationManager assignPharmacyLocationManager;

@PostMapping("/pharmacyLocationNames")
public ResponseEntity<List<PharmacyLocationBean>> PharmacyLocationNames(@RequestBody PayloadBean payloadBean){
	List<PharmacyLocationBean> pharmacyLocationNamesToList=null;
	pharmacyLocationNamesToList=assignPharmacyLocationManager.PharmacyLocationNames(payloadBean);
	return new ResponseEntity<List<PharmacyLocationBean>>(pharmacyLocationNamesToList, HttpStatus.OK);
}

@PostMapping("/searchLocationNames")
public ResponseEntity<List<PharmacyLocationEntityTO>> searchLocationNames(@RequestBody PayloadBean payloadBean){
	List<PharmacyLocationEntityTO>pharmacyLocationTo=null;
//if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null,"", Locale.US)))	{
	pharmacyLocationTo=assignPharmacyLocationManager.searchLocationNames(payloadBean);
//}
	
		return new ResponseEntity<List<PharmacyLocationEntityTO>>(pharmacyLocationTo, HttpStatus.OK);
	
	}
		@PostMapping("/searchLocationCode")
			public ResponseEntity<List<PharmacyLocationEntityTO>> searchLocationCode(@RequestBody PayloadBean payloadBean){
			List<PharmacyLocationEntityTO>pharmacyLocationTo=null;
//if	(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null,"", Locale.US)))	{
			pharmacyLocationTo=assignPharmacyLocationManager.searchLocationCode(payloadBean);
//}
	
			return new ResponseEntity<List<PharmacyLocationEntityTO>>(pharmacyLocationTo, HttpStatus.OK);
	
	}
		
	@PutMapping("/update-Pharmacy-location")
	public BaseResponse updatePharmacyLocation(@RequestBody AssignPharmacyLocationScreenBean assignPharmacyLocationScreenBean, HttpServletRequest request) {
		BaseResponse baseResponse = null;
		System.out.println("In update pharmacy location method");
	try {
		assignPharmacyLocationScreenBean.setIpAddress(request.getRemoteAddr());	
	String resultString = assignPharmacyLocationManager.updatePharmacyLocation(assignPharmacyLocationScreenBean);
	if (resultString.equalsIgnoreCase("UPDATED")) {
	baseResponse = new BaseResponse(HttpStatus.OK, "UPDATED", "");
	} 
			
	return baseResponse;
	} catch (Exception e) {
	e.printStackTrace();
	return baseResponse;
		}
	}
	
	@PostMapping("/add-Pharmacy-location")
	public BaseResponse addPharmacyLocation(@RequestBody AssignPharmacyLocationScreenBean assignPharmacyLocationScreenBean, HttpServletRequest request) {
		BaseResponse baseResponse = null;
		assignPharmacyLocationScreenBean.setIpAddress(request.getRemoteAddr());
		String resultString = assignPharmacyLocationManager.addPharmacyLocation(assignPharmacyLocationScreenBean);
		if (resultString.equalsIgnoreCase("ADDED")) {
			baseResponse = new BaseResponse(HttpStatus.OK, "ADDED", "");
		} 
		return baseResponse;

	}
	
	@PostMapping("/delete-PharmacyUser")
	public BaseResponse deletePharmacyUser(@RequestBody PharmacyLocationUserBean pharmacyLocationUserBean) {
		BaseResponse baseResponse = null;
		try {
			String resultString = assignPharmacyLocationManager.deletePharmacyUser(pharmacyLocationUserBean);
			if (resultString.equalsIgnoreCase("DELETED")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "DELETED", "");
			} else if (resultString.equalsIgnoreCase("TransactionFailed")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("recordDeleted")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
			}
			return baseResponse;
		} catch (Exception e) {
			e.printStackTrace();
			return baseResponse;
		}
	}
}
