package com.edios.pms.dao;

import java.util.List;

import com.edios.cdf.dao.BaseDao;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.util.TransactionData;
import com.edios.pms.entity.ItemOrderEntity;
import com.edios.pms.entity.ItemOrderProcessingEntity;
import com.edios.pms.entity.ItemStockEntity;
import com.edios.pms.entity.to.ItemOrderEntityTO;
import com.edios.pms.entity.to.ItemOrderProcessingTO;
import com.edios.pms.entity.to.ItemStockEntityTO;
import com.edios.pms.entity.to.ReportsTO;

public interface DistributeOrderDao extends BaseDao<ItemOrderEntity> {
	
	
	List<ItemOrderEntityTO> getItemDistributeOrderDetails(PayloadBean payloadBean);
	
	List<ItemStockEntityTO> getInStockItemDetails(ItemStockEntityTO payloadBean);
	
	boolean addItemOrderProcessingDetails(ItemOrderProcessingEntity ItemOrderProcessingEntity);
	
	ItemStockEntity fetchItemStockEntityById(Long id);
	
	boolean updateItemStockEnitity(ItemStockEntity objItemStockEntity);
	
	TransactionData fetchTransactionDataById(Long id);
	
	boolean updateItemOrder(ItemOrderEntity ItemOrderEntity);
	
	ItemOrderProcessingEntity fetchItemOrderProcessingEntityById(Long id);
	
	boolean updateItemOrderProcessingDetails(ItemOrderProcessingEntity objItemOrderProcessingEntity);
	
	ItemOrderProcessingTO fetchItemOrderProcessingEntityDetails(Long id);
	
	boolean deleteItemOrderProcessingById(Long id);
	
	List<ReportsTO> checkItemOrderDetailsCompletedOrNot(List<Long> itemOrderDetailIdList);
	
	/*
	PharmacyLocationEntityTO getUserPharmacyLocation(Long userID);
	
	List<PharmacyLocationEntityTO> getUserCorrespondingPharmacyLocation(Long userID);
	
	List<PharmacyStoreEntityTO> getUserPharmacyStore(Long userID);
	
	List<ItemEntityTO> getItemDetails(PayloadBean payloadBean);
	
	List<ItemPackSizeEntityTO> getItemPackSizeDetails(PayloadBean payloadBean);
	
	ItemStockEntityTO fetchItemQuantityOnHandDetail( ItemStockEntityTO itemStockEntityTO);
	
	Long addItemOrder(ItemOrderEntity ItemOrderEntity);
	
	boolean addItemOrderDetails(ItemOrderDetailEntity ItemOrderDetailEntity);
	
	ItemOrderEntity findItemOrderById(Long itemOrderId);
	
	List<ItemOrderDetailEntity> findItemOrderDetailsByItemOrderPK(Long itemOrderId);
	
	boolean updateItemOrder(ItemOrderEntity ItemOrderEntity);
	
	boolean updateItemOrderDetail(ItemOrderDetailEntity ItemOrderDetailEntity);
	
	
	
	TransactionData fetchTransactionDataOfItemOrderDetailById(Long id);*/
}
