package com.edios.pms.dao.impl;

import java.util.List;

import javax.persistence.NoResultException;

import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Repository;

import com.edios.cdf.dao.impl.BaseDaoImpl;
import com.edios.cdf.entity.security.UserEntity;
import com.edios.cdf.util.PayloadBean;
import com.edios.pms.dao.DashboardDao;
import com.edios.pms.entity.to.DashboardTO;

@Repository
@SuppressWarnings({ "deprecation", "unchecked" })
public class DashboardDaoImpl extends BaseDaoImpl<UserEntity> implements DashboardDao {
	@Autowired	MessageSource messageSource;
	
	

	@Override
	public DashboardTO findDashBoardById(PayloadBean payloadBean) {
		DashboardTO dashboardEntity = null;		
		
		Session session=(Session)entityManager.getDelegate();		
		String sqlQuery = "";
		try {
			sqlQuery = "select dashboardDetail.dashboardID as dashboardID,dashboardDetail.dashboardName as dashBoardName,dashboardDetail.dashboardCode as dashBoardCode from  UserDashboardEntity userRights left join userRights.dashboard dashboardDetail left join userRights.user as userDetail  where  userDetail.userID=:userID and dashboardDetail.dashboardStatus='Active'";
			dashboardEntity = (DashboardTO) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getId()).setResultTransformer(Transformers.aliasToBean(DashboardTO.class)).getSingleResult();
	}catch (Exception exception) {
		exception.printStackTrace();
		return null;
	}  
		return dashboardEntity;
		
	
	}



	@Override
	public List<DashboardTO> getDashboardWidgetDetails(Long dashboardID) {
		List<DashboardTO> dashboardEntityList = null;		
		
		Session session=(Session)entityManager.getDelegate();		
		String sqlQuery = "";
		try {
			sqlQuery = "select widget.widgetName as widgetName,widget.widgetImageFileName as widgetImageFileName,widget.widgetScreenURL as widgetScreenURL,widget.widgetImageColour as widgetImageColour "
					+ "from DashboardWidgetEntity dashWid"
					+ " left join dashWid.dashboard dashboardDetail "
					+ "left join dashWid.widget as widget "
					+ " where  dashboardDetail.dashboardID=:dashboardID and widget.widgetStatus='Active' order by dashWid.widgetSequence asc";
			dashboardEntityList = (List<DashboardTO>) session.createQuery(sqlQuery).setParameter("dashboardID", dashboardID).setResultTransformer(Transformers.aliasToBean(DashboardTO.class)).list();
	}catch (Exception exception) {
		exception.printStackTrace();
		return null;
	}  
		return dashboardEntityList;
		
	
	}


	

}
