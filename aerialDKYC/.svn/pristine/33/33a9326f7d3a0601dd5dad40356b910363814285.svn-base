package com.edios.pms.controller;



import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.edios.cdf.controller.AbstractController;
import com.edios.cdf.util.DeleteRecords;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.util.TransactionFailedException;
import com.edios.cdf.validator.BaseResponse;
import com.edios.pms.entity.to.DataSourceFieldTO;
import com.edios.pms.entity.to.DataSourceTO;
import com.edios.pms.manager.DataSourceManager;


@RestController
public class DataSourceController extends AbstractController {
	@Autowired
	MessageSource messageSource;

	@Autowired
	DataSourceManager dataSourceManager;

	
	@PostMapping("/search-data-sources-on-criteria")
	public ResponseEntity<List<DataSourceTO>> getDataSourcesDetails(@RequestBody PayloadBean payloadBean) {
		List<DataSourceTO> objDataSourceTOList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objDataSourceTOList = dataSourceManager.getDataSourcesDetails(payloadBean);
			return new ResponseEntity<List<DataSourceTO>>(objDataSourceTOList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	
	@PostMapping("/get-view-and-table-detail")
	public ResponseEntity<List<String>> getViewAndTableDetail(@RequestBody PayloadBean payloadBean) {
		List<String> objList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objList = dataSourceManager.getViewAndTableDetail(payloadBean);
			return new ResponseEntity<List<String>>(objList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	
	@PostMapping("/get-view-and-table-description")
	public ResponseEntity<List<DataSourceFieldTO>> getViewTableDescription(@RequestBody PayloadBean payloadBean) {
		List<DataSourceFieldTO> objList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objList = dataSourceManager.getViewTableDescription(payloadBean.getSearchParameter());
			return new ResponseEntity<List<DataSourceFieldTO>>(objList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	
	@PostMapping("/add-data-source")
	public BaseResponse addDataSource(@RequestBody DataSourceTO objDataSourceTO, HttpServletRequest request) {
		BaseResponse baseResponse = null;
		try {
		//objWorksStationAssignmentBean.setIpAddress(request.getRemoteAddr());
		String resultString = dataSourceManager.addDataSource(objDataSourceTO,request);
		if (resultString.equalsIgnoreCase("ADDED")) {
			baseResponse = new BaseResponse(HttpStatus.OK, "ADDED", "");
		} else if (resultString.equalsIgnoreCase("NameAlreadyExist")) {
			baseResponse = new BaseResponse(HttpStatus.ALREADY_REPORTED, "ALREADY_REPORTED",
					messageSource.getMessage("duplicateFieldMessage", new Object[] { "Data Source Name" }, "", Locale.US));
		} 
		}catch(Exception e) {
			e.printStackTrace();
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Something went wrong! please try again later.");
		}
		return baseResponse;
	}
	
	@PostMapping("/edit-data-source")
	public ResponseEntity<DataSourceTO> editDataSource(@RequestBody PayloadBean payloadBean) {
		if (payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			DataSourceTO objDataSourceTO = dataSourceManager.editDataSource(payloadBean.getId());
			return new ResponseEntity<DataSourceTO>(objDataSourceTO, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(null, HttpStatus.UNAUTHORIZED);
		}
	}
	
	@PutMapping("/update-data-source")
	public BaseResponse updateDataSource(@RequestBody DataSourceTO objDataSourceTO, HttpServletRequest request) {
		BaseResponse baseResponse = null;
		try {
			String resultString = dataSourceManager.updateDataSource(objDataSourceTO,request);
			if (resultString.equalsIgnoreCase("UPDATED") || resultString.equalsIgnoreCase("ADDED")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "UPDATED", "");
			} else if (resultString.equalsIgnoreCase("NameAlreadyExist")) {
				baseResponse = new BaseResponse(HttpStatus.CONFLICT, "CONFLICT",
						messageSource.getMessage("duplicateFieldMessage", new Object[] { "Data Source Name" }, "", Locale.US));
			}
			else if (resultString.equalsIgnoreCase("TransactionFailed")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("recordDeleted")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
			}
			return baseResponse;
		} catch (Exception exception) {
			exception.printStackTrace();
			if(exception instanceof TransactionFailedException) {
				return new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						exception.getMessage());
			}
			else
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Something went wrong! please try again later.");
		}
	}
	
	@PostMapping("/delete-data-source-field")
	public BaseResponse deleteDataSourceField(@RequestBody DeleteRecords deleteRecords) {
		BaseResponse baseResponse = null;
		try {
			String resultString = dataSourceManager.deleteDataSourceField(deleteRecords);
			if (resultString.equalsIgnoreCase("DELETED")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "DELETED", "");
			} else if (resultString.equalsIgnoreCase("TransactionFailed")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("recordDeleted")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
			}
			return baseResponse;
		} catch (Exception e) {
			e.printStackTrace();
			return baseResponse;
		}
	}
	
	@PostMapping("/verify-dynamic-sql")
	public ResponseEntity<List> verifyDynamicSQL(@RequestBody PayloadBean payloadBean) {
		List objList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objList = dataSourceManager.verifyDynamicSQL(payloadBean);
			return new ResponseEntity<List>(objList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	
	
	/*@PostMapping("/fetch-autolookup-pharmacy-location-info-for-site")
	public ResponseEntity<List<PharmacyLocationEntityTO>> fetchPharmacyLocationForSiteDetails(@RequestBody PayloadBean payloadBean) {
		List<PharmacyLocationEntityTO> objPharmacyLocationEntityTOList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			objPharmacyLocationEntityTOList = dataSourceManager.fetchPharmacyLocationForSiteDetails(payloadBean.getId());
			return new ResponseEntity<List<PharmacyLocationEntityTO>>(objPharmacyLocationEntityTOList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	

	

	

	
	
	@PostMapping("/fetch-pharmacy-location-robots")
	public ResponseEntity<List<PharmacyLocationRobotEntityTO>> fetchPharmacyLocationRobots(@RequestBody PayloadBean payloadBean) {
		List<PharmacyLocationRobotEntityTO> pharmacyLocationRobotEntityTOList=null;
		if(payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			pharmacyLocationRobotEntityTOList = dataSourceManager.fetchPharmacyLocationRobots(payloadBean.getId());
			return new ResponseEntity<List<PharmacyLocationRobotEntityTO>>(pharmacyLocationRobotEntityTOList, HttpStatus.OK);
		}else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}*/
}
