package com.edios.pms.dao.impl;

import java.text.SimpleDateFormat;
import java.util.List;

import javax.persistence.NoResultException;

import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Repository;

import com.edios.cdf.dao.impl.BaseDaoImpl;
import com.edios.cdf.util.DeleteRecords;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.util.TransactionData;
import com.edios.pms.dao.CompoundItemDao;
import com.edios.pms.entity.CompoundItemDetailEntity;
import com.edios.pms.entity.CompoundItemEntity;
import com.edios.pms.entity.to.CompoundItemEntityTO;
import com.edios.pms.entity.to.ConfigureCompoundItemsTO;
import com.edios.pms.entity.to.ItemEntityTO;

@Repository
public class CompoundItemDaoImpl extends BaseDaoImpl<CompoundItemEntity> implements CompoundItemDao {
	@Autowired
	MessageSource messageSource;
	

	@Override
	public List<ItemEntityTO> getCompoundItemDetails(PayloadBean payloadBean) {

		List<ItemEntityTO> objItemEntityTOList = null;
		String sqlQuery = "";
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select item.itemId as itemId,item.itemName as itemName,item.itemCode as itemCode,item.orderAsPack as orderAsPack,item.measurementUnit as measurementUnit from ItemEntity item"
						+ " where item.itemStatus =:itemStatus and item.combination='Yes' ";
			objItemEntityTOList = (List<ItemEntityTO>) session.createQuery(sqlQuery)
					.setParameter("itemStatus", payloadBean.getSearchParameter())
					.setResultTransformer(Transformers.aliasToBean(ItemEntityTO.class)).list();
			
			
		
		return objItemEntityTOList;
	
	}
	
	@Override
	public List<ItemEntityTO> getItemDetailsWithCombinationStatus(PayloadBean payloadBean) {

		List<ItemEntityTO> objItemEntityTOList = null;
		String sqlQuery = "";
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select item.itemId as itemId,item.itemName as itemName,item.itemCode as itemCode,item.orderAsPack as orderAsPack,item.measurementUnit as measurementUnit from ItemEntity item"
						+ " where item.itemStatus =:itemStatus and item.combination=:combinationStatus ";
			objItemEntityTOList = (List<ItemEntityTO>) session.createQuery(sqlQuery)
					.setParameter("itemStatus", payloadBean.getSearchParameter())
					.setParameter("combinationStatus", payloadBean.getCustomParameter())
					.setResultTransformer(Transformers.aliasToBean(ItemEntityTO.class)).list();
			
			
		
		return objItemEntityTOList;
	
	}

	@Override
	public boolean isCompoundItemNameExist(Long itemId,Long compoundItemId) {
		try {
			return entityManager.createQuery(
					"select table.compoundItemId as compoundItemId from CompoundItemEntity table where "
							+ " table.item.itemId=" + itemId+" and table.compoundItemId!="+compoundItemId)
					.getSingleResult() == null ? false : true;
		} catch (NoResultException ex) {
			return false;
		} catch (Exception exception) {
			exception.printStackTrace();
			return true;
		}
	}

	@Override
	public Long addCompoundItemEntity(CompoundItemEntity objCompoundItemEntity) {
		entityManager.persist(objCompoundItemEntity);
		return objCompoundItemEntity.getCompoundItemId();
	}

	@Override
	public boolean addCompoundItemDetailEntity(CompoundItemDetailEntity objCompoundItemDetailEntity) {
		entityManager.persist(objCompoundItemDetailEntity);
		return true;
	}

	@Override
	public List<CompoundItemEntityTO> getCompoundItemDetails(ConfigureCompoundItemsTO payloadBean) {
		List<CompoundItemEntityTO> objCompoundItemEntityTOList = null;
		String sqlQuery = "",whereClause="";
		if(payloadBean.getItem()!=null) {
			whereClause=" and item.itemId = "+payloadBean.getItem().getItemId();
		}	
		 SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  
    	 String fromDate= formatter.format(payloadBean.getConfigurationFromDate())+" 00:00:00";  
		 String toDate= formatter.format(payloadBean.getConfigurationTODate())+" 23:59:59";
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select count(compoundItemDetail.compoundItemDetailId) as noOfMixedItems,compoundItemBean.compoundItemId as compoundItemId,item.itemName as itemName,item.itemCode as itemCode,"
					+ "compoundItemBean.configurationDate as configurationDate,packSizeDetail.packSize as packSize"
					+ " from CompoundItemDetailEntity compoundItemDetail"
					+ " right join compoundItemDetail.compoundItem compoundItemBean"
					+ " left join compoundItemBean.item item"
					+ " left join compoundItemBean.itemPackSize packSizeDetail"
						+ " where compoundItemBean.recordType<>'D' and compoundItemBean.configurationDate between '"+fromDate+"' and '"+toDate+"' "+whereClause+" group by compoundItemBean.compoundItemId,item.itemName,item.itemCode,compoundItemBean.configurationDate,packSizeDetail.packSize  order by compoundItemBean.compoundItemId asc";
			objCompoundItemEntityTOList = (List<CompoundItemEntityTO>) session.createQuery(sqlQuery)
					.setResultTransformer(Transformers.aliasToBean(CompoundItemEntityTO.class)).list();
			
			
		
		return objCompoundItemEntityTOList;
	}

	@Override
	public CompoundItemEntity findCompoundItemBeanDetailsById(Long compoundItemId) {
		return entityManager.find(CompoundItemEntity.class, compoundItemId);
	}
	
	@Override
	public TransactionData fetchTransactionDataById(Long id) {

		TransactionData transactionData = null;
		String sqlQuery = "";
		
			Session session = (Session) entityManager.getDelegate();
			sqlQuery = "select table.transactionCount as transactionCount,table.recordType as recordType"
					+ " from  CompoundItemEntity table where table.compoundItemId=:compoundItemId";
			transactionData = (TransactionData) session.createQuery(sqlQuery).setParameter("compoundItemId", id)
					.setResultTransformer(Transformers.aliasToBean(TransactionData.class)).list().get(0);
		
		return transactionData;
	
	}

	@Override
	public TransactionData fetchTransactionDataByCompoundItemDetailId(Long id) {

		TransactionData transactionData = null;
		String sqlQuery = "";
		
			Session session = (Session) entityManager.getDelegate();
			sqlQuery = "select table.transactionCount as transactionCount,table.recordType as recordType"
					+ " from  CompoundItemDetailEntity table where table.compoundItemDetailId=:compoundItemDetailId";
			transactionData = (TransactionData) session.createQuery(sqlQuery).setParameter("compoundItemDetailId", id)
					.setResultTransformer(Transformers.aliasToBean(TransactionData.class)).list().get(0);
		
		return transactionData;
	
	}

	@Override
	public boolean updateCompoundItemEntity(CompoundItemEntity objCompoundItemEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.update(objCompoundItemEntity);
		return true;
	}

	@Override
	public boolean updateCompoundItemDetailEntity(CompoundItemDetailEntity objCompoundItemDetailEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.update(objCompoundItemDetailEntity);
		return true;
	}

	@Override
	public boolean deleteCompoundItemDetailsById(DeleteRecords deleteRecords) {
		String sqlQuery="";
		int count=0;
		Session session = (Session) entityManager.getDelegate();
		sqlQuery ="delete from CompoundItemDetailEntity"
				+ " where compoundItemDetailId=:compoundItemDetailId";
		 count=session.createQuery(sqlQuery).setParameter("compoundItemDetailId", deleteRecords.getId())
				.executeUpdate();
		 if(count>0)
			 return true;
		 else
			 return false;
	}
	
	
	
	
	/*@Override
	public PharmacyLocationEntityTO getUserPharmacyLocation(Long userID) {
		List<PharmacyLocationEntityTO> objPharmacyLocationEntityTOList = null;
		String sqlQuery = "";
			Session session = (Session) entityManager.getDelegate();
			sqlQuery = "select pharmacyLoc.pharmacyLocationId as pharmacyLocationId,concat(site.siteName,'(',pharmacyLoc.pharmacyLocationName,')') as pharmacyLocationName from PharmacyLocationUserEntity plue left join plue.pharmacyLocation pharmacyLoc"
					+ " left join pharmacyLoc.siteId site "
					+ " left join plue.userId user"
					+ " where user.userID =:userID";
					objPharmacyLocationEntityTOList = (List<PharmacyLocationEntityTO>) session.createQuery(sqlQuery)
					.setParameter("userID", userID)
					.setResultTransformer(Transformers.aliasToBean(PharmacyLocationEntityTO.class)).list();
			
			if(objPharmacyLocationEntityTOList==null || objPharmacyLocationEntityTOList.isEmpty())
			{
				return null;
			}
			else {
				return objPharmacyLocationEntityTOList.get(0);
			}
		
		//return applicationParameterListTO;
	}

	@Override
	public List<PharmacyLocationEntityTO> getUserCorrespondingPharmacyLocation(Long userID) {

		List<PharmacyLocationEntityTO> objPharmacyLocationEntityTOList = null;
		String sqlQuery = "";
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select phLocUserEn.pharmacyLocationId as pharmacyLocationId,phLocUserEn.pharmacyLocationName as pharmacyLocationName from"
					+ " PharmacyLocationEntity phLocUserEn where phLocUserEn.pharmacyLocationId not in ("
					+"select pharmacyLoc.pharmacyLocationId from PharmacyLocationUserEntity plue left join plue.pharmacyLocation pharmacyLoc"
					+ " left join plue.userId user where user.userID =:userID) and phLocUserEn.siteId.siteID=("
					+"select pharmacyLoc.siteId.siteID from PharmacyLocationUserEntity plue left join plue.pharmacyLocation pharmacyLoc"
					+ " left join plue.userId user where user.userID =:userID) and phLocUserEn.recordType<>'D' and phLocUserEn.pharmacyLocationStatus='Active'";
					objPharmacyLocationEntityTOList = (List<PharmacyLocationEntityTO>) session.createQuery(sqlQuery)
					.setParameter("userID", userID)
					.setResultTransformer(Transformers.aliasToBean(PharmacyLocationEntityTO.class)).list();
			
			
		
		return objPharmacyLocationEntityTOList;
	
	}

	@Override
	public List<PharmacyStoreEntityTO> getUserPharmacyStore(Long userID) {

		List<PharmacyStoreEntityTO> objPharmacyStoreEntityTOList = null;
		String sqlQuery = "";
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select phStoreEn.pharmacyStoreId as pharmacyStoreId,phStoreEn.pharmacyStoreName as pharmacyStoreName from PharmacyStoreEntity phStoreEn where  phStoreEn.siteId.siteID=("
					 +"select pharmacyLoc.siteId.siteID from PharmacyLocationUserEntity plue left join plue.pharmacyLocation pharmacyLoc"
						+ " left join plue.userId user"
						+ " where user.userID =:userID) and phStoreEn.recordType<>'D' and phStoreEn.pharmacyStoreStatus='Active'";
			objPharmacyStoreEntityTOList = (List<PharmacyStoreEntityTO>) session.createQuery(sqlQuery)
					.setParameter("userID", userID)
					.setResultTransformer(Transformers.aliasToBean(PharmacyStoreEntityTO.class)).list();
			
			
		
		return objPharmacyStoreEntityTOList;
	
	}*/


	/*

	

	
	@Override
	public boolean updateItemOrder(ItemOrderEntity ItemOrderEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.update(ItemOrderEntity);
		return true;
	}

	@Override
	public boolean updateItemOrderDetail(ItemOrderDetailEntity ItemOrderDetailEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.update(ItemOrderDetailEntity);
		return true;
	}



	@Override
	public TransactionData fetchTransactionDataOfItemOrderDetailById(Long id) {
		TransactionData transactionData = null;
		String sqlQuery = "";
		
			Session session = (Session) entityManager.getDelegate();
			sqlQuery = "select table.transactionCount as transactionCount,table.recordType as recordType"
					+ " from  ItemOrderDetailEntity table where table.itemOrderDetailId=:itemOrderDetailId";
			transactionData = (TransactionData) session.createQuery(sqlQuery).setParameter("itemOrderDetailId", id)
					.setResultTransformer(Transformers.aliasToBean(TransactionData.class)).list().get(0);
		
		return transactionData;
	}

	@Override
	public ItemStockEntityTO fetchDistributedQunatityByItemOrderDetailID(Long itemOrderDetailId) {


		ItemStockEntityTO objItemPackSizeEntityTO = null;
		String sqlQuery = "";
		try {
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select sum(itemOrderProcc.distributedQuantity) as distributeQuantity from ItemOrderProcessingEntity itemOrderProcc"
					+ " left join itemOrderProcc.itemOrderDetail itemOrderDetail"
						+ " where itemOrderDetail.itemOrderDetailId=:itemOrderDetailId and itemOrderProcc.recordType <>'D' group by itemOrderDetail.itemOrderDetailId";
			objItemPackSizeEntityTO = (ItemStockEntityTO) session.createQuery(sqlQuery)
					.setParameter("itemOrderDetailId", itemOrderDetailId)
					.setResultTransformer(Transformers.aliasToBean(ItemStockEntityTO.class)).getSingleResult();
		}catch(NoResultException noResultException)	{
			objItemPackSizeEntityTO=new ItemStockEntityTO();
		}
		return objItemPackSizeEntityTO;
	
	
	}
	@Override
	public List<ReportsTO> fetchAutoOrdersMinimumQuantityItemDetails(PayloadBean payloadBean) {
		Session session = (Session) entityManager.getDelegate();
		
		String sqlQuery = "select itemDetail.itemId as itemId,itemDetail.itemName as itemName,itemDetail.itemCode as itemCode,itemDetail.dispenseAsPack as dispenseAsPack"
				+ " ,sum(itemStock.quantityOnHand) as quantityOnHand,iis.aoMinQuantity as aoMinQuantity,iis.reorderQuantity as reorderQuantity,pharmacyLocationDetail.pharmacyLocationId as pharmacyLocationId"
				+ " from ItemStockEntity itemStock"
				+ " left join itemStock.item itemDetail"
				+ " left join  itemStock.pharmacyLocation pharmacyLocationDetail"
				+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on pharmacyLocationDetail.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId "
				+ " inner join ItemInventorySettingEntity iis on iis.item.itemId= itemDetail.itemId "
				+ "  where itemDetail.itemStatus='Active' and itemStock.recordType <>'D' and pharmacyLocationUser.userId.userID=:userID and iis.aoMinQuantity is not null and iis.pharmacyLocation.pharmacyLocationId=(select pharmacyLocation.pharmacyLocationId from PharmacyLocationUserEntity where userId.userID="+payloadBean.getId()+")"
				+ " group by itemDetail.itemId,itemDetail.itemName,itemDetail.itemCode,itemDetail.dispenseAsPack," 
				+ " iis.aoMinQuantity,iis.reorderQuantity,pharmacyLocationDetail.pharmacyLocationId";
		return (List<ReportsTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getId())
				.setResultTransformer(Transformers.aliasToBean(ReportsTO.class)).list();
	}

	@Override
	public ReportsTO fetchRecorderQuantityOfItemCorrespondingPharmacyLocation(Long pharmacyLocationId, Long itemId) {
	String sqlQuery = "";
	ReportsTO objReportsTO=null;
	try {
		Session session = (Session) entityManager.getDelegate();
		sqlQuery ="select iis.reorderQuantity as reorderQuantity from ItemInventorySettingEntity iis"
				+ " where iis.pharmacyLocation.pharmacyLocationId=:pharmacyLocationId and item.itemId=:itemId and iis.recordType<>'D'";
		objReportsTO = (ReportsTO) session.createQuery(sqlQuery)
				.setParameter("pharmacyLocationId", pharmacyLocationId)
				.setParameter("itemId", itemId)
				.setResultTransformer(Transformers.aliasToBean(ReportsTO.class)).getSingleResult();
	}catch(NoResultException noResultException)	{
		objReportsTO=new ReportsTO();
	}
	return objReportsTO;}

	@Override
	public boolean deleteItemOrderDetailsById(DeleteRecords deleteRecords) {
		String sqlQuery="";
		int count=0;
		Session session = (Session) entityManager.getDelegate();
		sqlQuery ="delete from ItemOrderDetailEntity"
				+ " where itemOrderDetailId=:itemOrderDetailId";
		 count=session.createQuery(sqlQuery).setParameter("itemOrderDetailId", deleteRecords.getId())
				.executeUpdate();
		 if(count>0)
			 return true;
		 else
			 return false;
	}

	*/
}
