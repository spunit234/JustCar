package com.edios.pms.entity;

import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import com.edios.cdf.entity.AbstractEntity;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Table(name="patient_encounters")
@Setter
@Getter
@NoArgsConstructor
public class PatientEncounterEntity extends AbstractEntity {
	
	private static final long serialVersionUID = -8014468495298684253L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name="PATIENT_ENCOUNTER_ID")
	private Long patientEncounterId;

	@Column(name="ADMISSION_TYPE")
	private String admissionType;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="ADMIT_DATE_TIME")
	private Date admitDateTime;

	@Column(name="ATTENDING_DOCTOR")
	private String attendingDoctor;

	@Column(name="CREATED_BY")
	private Long createdBy;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="CREATED_DATE")
	private Date createdDate;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="DISCHARGE_DATE_TIME")
	private Date dischargeDateTime;

	@Column(name="IP_ADDRESS")
	private String ipAddress;

	@Column(name="LAST_MODIFIED_BY")
	private Long lastModifiedBy;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="LAST_MODIFIED_DATE")
	private Date lastModifiedDate;

	@Column(name="PATIENT_TYPE")
	private String patientType;

	@Column(name="RECORD_TYPE")
	private Character recordType;

	@Column(name="REFERRING_DOCTOR")
	private String referringDoctor;

	@Column(name="TRANSACTION_COUNT")
	private Long transactionCount;

	@Column(name="USER_ACTIVITY_ID")
	private Long userActivityId;

	@Column(name="VISIT_NUMBER")
	private String visitNumber;

	//bi-directional many-to-one association to Patient
	@ManyToOne
	@JoinColumn(name="PATIENT_ID")
	private PatientEntity patient;

	//bi-directional many-to-one association to PatientPrescription
	@OneToMany(mappedBy="patientEncounter")
	private List<PatientPrescriptionEntity> patientPrescriptions;

	

}