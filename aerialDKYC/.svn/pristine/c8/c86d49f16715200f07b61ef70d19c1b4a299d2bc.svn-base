package com.edios.pms.controller;

import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.edios.cdf.controller.AbstractController;
import com.edios.cdf.util.DeleteRecords;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.validator.BaseResponse;
import com.edios.pms.bean.PharmacyLocationBean;
import com.edios.pms.bean.PharmacyLocationRobotBean;
import com.edios.pms.entity.to.PharmacyLocationEntityTO;
import com.edios.pms.manager.PharmacyLocationsManager;

@RestController
public class PharmacyLocationsController extends AbstractController {

	@Autowired
	MessageSource messageSource;
	
	@Autowired
	PharmacyLocationsManager pharmacyLocationsManager;
	
	@PostMapping("/fetch-locations")
	public ResponseEntity<List<PharmacyLocationEntityTO>> fetchPharmacyLocations(@RequestBody PayloadBean payloadBean) {
		List<PharmacyLocationEntityTO> pharmacyLocationsList = null;
		if (payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			pharmacyLocationsList = pharmacyLocationsManager.fetchPharmacyLocations(payloadBean);
			return new ResponseEntity<List<PharmacyLocationEntityTO>>(pharmacyLocationsList, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}
	
	@PostMapping("/delete-locations")
	public BaseResponse deletePharmacy(@RequestBody DeleteRecords deleteRecords,HttpServletRequest request) {
		BaseResponse baseResponse = null;
		
		try {
			String resultString = pharmacyLocationsManager.deletePharmacy(deleteRecords,request.getRemoteAddr());
			if (resultString.equalsIgnoreCase("DELETED")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "DELETED", "");
			} else if (resultString.equalsIgnoreCase("TransactionFailed")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("recordDeleted")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
			}
			return baseResponse;
		} catch (Exception e) {
			e.printStackTrace();
			return baseResponse;
		}
	}
	
	@PostMapping("/add-locations")
	public BaseResponse addPharmacy(@RequestBody PharmacyLocationBean pharmacyLocationBean, HttpServletRequest request) {
		BaseResponse baseResponse = null;		
		try {
			pharmacyLocationBean.setIpAddress(request.getRemoteAddr());	
			
				String resultString =pharmacyLocationsManager.addPharmacyLocation(pharmacyLocationBean);
				if (resultString.equalsIgnoreCase("ADDED")) {
					baseResponse = new BaseResponse(HttpStatus.OK, "ADDED", "");
				} else if (resultString.equalsIgnoreCase("NameAlreadyExist")) {
					baseResponse = new BaseResponse(HttpStatus.ALREADY_REPORTED, "ALREADY_REPORTED", messageSource
							.getMessage("duplicateFieldMessage", new Object[] { "Location Name" }, "", Locale.US));
				} else if (resultString.equalsIgnoreCase("CodeAlreadyExist")) {
					baseResponse = new BaseResponse(HttpStatus.ALREADY_REPORTED, "ALREADY_REPORTED", messageSource
							.getMessage("duplicateFieldMessage", new Object[] { "Location Code" }, "", Locale.US));
				}
			
			
			return baseResponse;
		} catch (Exception e) {
			e.printStackTrace();
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Some Thing went wrong! please try later.");
		}
		}
	
	@PostMapping("/edit-pharmacy-location")
	public ResponseEntity<PharmacyLocationBean> editPharmacy(@RequestBody PayloadBean payloadBean) {
		PharmacyLocationBean pharmacyLocationBean = null;
		try {
		if (payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
			pharmacyLocationBean = pharmacyLocationsManager.findPharmacyLocationById(payloadBean);
			
		}
		}catch(Exception exception){
		exception.printStackTrace();
		return new ResponseEntity<PharmacyLocationBean>(pharmacyLocationBean, HttpStatus.OK);
		}
		return new ResponseEntity<PharmacyLocationBean>(pharmacyLocationBean, HttpStatus.OK);
}
	
	@PostMapping("/update-locations")
	public BaseResponse updatePharmacyLocations(@RequestBody PharmacyLocationBean pharmacyLocationBean,HttpServletRequest request) {
		BaseResponse baseResponse = null;
		try {
			pharmacyLocationBean.setIpAddress(request.getRemoteAddr());
			String resultString = pharmacyLocationsManager.updatePharmacyLocations(pharmacyLocationBean);
			if (resultString.equalsIgnoreCase("UPDATED")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "UPDATED", "");
			} else if (resultString.equalsIgnoreCase("NameAlreadyExist")) {
				baseResponse = new BaseResponse(HttpStatus.CONFLICT, "CONFLICT",
						messageSource.getMessage("duplicateFieldMessage", new Object[] { "Location Name" }, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("CodeAlreadyExist")) {
				baseResponse = new BaseResponse(HttpStatus.CONFLICT, "CONFLICT",
						messageSource.getMessage("duplicateFieldMessage", new Object[] { "Location Code" }, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("TransactionFailed")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
			} else if (resultString.equalsIgnoreCase("recordDeleted")) {
				baseResponse = new BaseResponse(HttpStatus.OK, "TRANSACTION_FAILED",
						messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
			}
			return baseResponse;
		} catch (Exception e) {
			e.printStackTrace();
			return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Some Thing went wrong! please try later.");
		}
	}
	
	//for PharmacyLocationRobot Controller 
		@PostMapping("/get-pharmacy-location-robot")
		public ResponseEntity<List<PharmacyLocationRobotBean>> fetchPharmacyLocationRobots(@RequestBody PayloadBean payloadBean) {
			List<PharmacyLocationRobotBean> pharmacyLocationRobotBeanList = null;
			if (payloadBean.getSignatureKey().equals(messageSource.getMessage("signatureKey", null, "", Locale.US))) {
				pharmacyLocationRobotBeanList = pharmacyLocationsManager.fetchPharmacyLocationRobots(payloadBean.getId());
				return new ResponseEntity<List<PharmacyLocationRobotBean>>(pharmacyLocationRobotBeanList, HttpStatus.OK);
			} else {
				return new ResponseEntity<>(null, HttpStatus.OK);
			}
		}
		
		@PostMapping("/robot-validation")
		public BaseResponse RobotValidation(@RequestBody  PayloadBean payloadBean) {
			BaseResponse baseResponse = null;		
			try {
					String resultString =pharmacyLocationsManager.RobotValidation(payloadBean);
					 if (resultString.equalsIgnoreCase("NameAlreadyExist")) {
						baseResponse = new BaseResponse(HttpStatus.ALREADY_REPORTED, "ALREADY_REPORTED", messageSource
								.getMessage("duplicateFieldMessage", new Object[] { "Robot Name" }, "", Locale.US));
					} else if (resultString.equalsIgnoreCase("CodeAlreadyExist")) {
						baseResponse = new BaseResponse(HttpStatus.ALREADY_REPORTED, "ALREADY_REPORTED", messageSource
								.getMessage("duplicateFieldMessage", new Object[] { "Robot Code" }, "", Locale.US));
					}
				return baseResponse;
			} catch (Exception e) {
				e.printStackTrace();
				return baseResponse = new BaseResponse(HttpStatus.OK, "EXCEPTION", "Some Thing went wrong! please try later.");
			}
			}
	
}
