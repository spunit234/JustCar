package com.edios.pms.manager.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.edios.cdf.manager.impl.AbstractManagerImpl;
import com.edios.cdf.util.AppConstants;
import com.edios.cdf.util.TransactionData;
import com.edios.pms.bean.ItemOrderProcessingBean;
import com.edios.pms.bean.ItemStockAdjustmentBean;
import com.edios.pms.bean.ItemTransactionBean;
import com.edios.pms.dao.ItemStockAdjustmentApprovalDao;
import com.edios.pms.dao.ReceiveOrderDao;
import com.edios.pms.entity.ItemStockAdjustmentEntity;
import com.edios.pms.entity.ItemTransactionEntity;
import com.edios.pms.entity.to.ItemStockAdjustmentEntityTO;
import com.edios.pms.entity.to.StockAdjustmentStockItemEntityTO;
import com.edios.pms.manager.ItemStockAdjustmentApprovalManager;

@Service
public class ItemStockAdjustmentApprovalManagerImpl extends AbstractManagerImpl<ItemStockAdjustmentBean,ItemStockAdjustmentEntity > implements ItemStockAdjustmentApprovalManager{

	
	@Autowired
	MessageSource messageSource;
	
	@Autowired
	ItemStockAdjustmentApprovalDao itemStockAdjustmentApprovalDao;
	
	@Autowired
	ReceiveOrderDao receiveOrderDao;

	@Override
	@Transactional
	public List<ItemStockAdjustmentEntityTO> fetchStockAdjustmentRecords(ItemStockAdjustmentBean itemStockAdjustmentBean) {
		return itemStockAdjustmentApprovalDao.fetchStockAdjustmentRecords(itemStockAdjustmentBean);
	}

	@Override
	@Transactional
	public ItemStockAdjustmentEntityTO fetchItemStockAdjustmentInfo(Long id) {
		return itemStockAdjustmentApprovalDao.fetchItemStockAdjustmentInfo(id);
	}

	@Override
	@Transactional
	public String UpdateItemStockAdjustmentStockItem(StockAdjustmentStockItemEntityTO stockAdjustmentStockItemEntityTO) {
		String resultString = "";
		boolean resultFlag = false;
		boolean resultFlag2 = false;
		// Optimistic Locking for Hibernate
		TransactionData latestData = itemStockAdjustmentApprovalDao.fetchTransactionDataById(stockAdjustmentStockItemEntityTO.getItemStockTransactionCount(),
				stockAdjustmentStockItemEntityTO.getItemStockId());
		if (latestData.getTransactionCount() > (stockAdjustmentStockItemEntityTO.getItemStockTransactionCount())) {
			return "TransactionFailed";
		}
		else {
			resultFlag = itemStockAdjustmentApprovalDao.updateItemStock(stockAdjustmentStockItemEntityTO.getItemStockId(),stockAdjustmentStockItemEntityTO.getQuantityOnHand()
					,(stockAdjustmentStockItemEntityTO.getItemStockTransactionCount()+AppConstants.TRANSACTION_BEGIN),stockAdjustmentStockItemEntityTO.getLastModifiedBy());
			
		}
		if (resultFlag) {
			 latestData = itemStockAdjustmentApprovalDao.fetchStockAdjustmentTransactionDataById(stockAdjustmentStockItemEntityTO.getItemStockAdjustmentTransactionCount(),
					stockAdjustmentStockItemEntityTO.getItemStockAdjustmentId());
			 if (latestData.getTransactionCount() > (stockAdjustmentStockItemEntityTO.getItemStockAdjustmentTransactionCount())) {
					return "TransactionFailed";
				}
				else {
			resultFlag2 = itemStockAdjustmentApprovalDao.UpdateItemStockAdjustment(stockAdjustmentStockItemEntityTO.getItemStockAdjustmentId()
					,(stockAdjustmentStockItemEntityTO.getItemStockTransactionCount()+AppConstants.TRANSACTION_BEGIN),stockAdjustmentStockItemEntityTO.getLastModifiedBy(),stockAdjustmentStockItemEntityTO.getAdjustmentStatus());
			ItemTransactionBean objAdjustedItemTransactionBean=mapper.map(receiveOrderDao.fetchLatestItemRecordForPharmacyLocation(stockAdjustmentStockItemEntityTO.getPharmacyLocationId(), stockAdjustmentStockItemEntityTO.getItemId()),ItemTransactionBean.class);
			ItemTransactionBean objAddAdjustedItemTransactionBean=new ItemTransactionBean();
			
			//ItemTransactionBean objDistributeItemTransactionBean=mapper.map(receiveOrderDao.fetchLatestItemRecordForPharmacyLocation(stockAdjustmentStockItemEntityTO.getPharmacyLocationId(), distributedItemStockBean.getItem().getItemId()),ItemTransactionBean.class);
			objAddAdjustedItemTransactionBean.setPharmacyLocation(objAdjustedItemTransactionBean.getPharmacyLocation());
			objAddAdjustedItemTransactionBean.setItem(objAdjustedItemTransactionBean.getItem());
			
			objAddAdjustedItemTransactionBean.setTransactionQuantity(stockAdjustmentStockItemEntityTO.getAdjustedQuantity());
			objAddAdjustedItemTransactionBean.setTransactionQuantityCost(Math.ceil(stockAdjustmentStockItemEntityTO.getAdjustedQuantity()/stockAdjustmentStockItemEntityTO.getPackSize())*stockAdjustmentStockItemEntityTO.getUnitCost());
			System.out.println("adjusted quantity "+stockAdjustmentStockItemEntityTO.getAdjustedQuantity());
			objAddAdjustedItemTransactionBean.setBalanceQuantity(objAdjustedItemTransactionBean.getBalanceQuantity()-stockAdjustmentStockItemEntityTO.getAdjustedQuantity());
			objAddAdjustedItemTransactionBean.setBalanceQuantityCost(objAdjustedItemTransactionBean.getBalanceQuantityCost()-objAddAdjustedItemTransactionBean.getTransactionQuantityCost());
			objAddAdjustedItemTransactionBean.setTransactionDate(new Date());
			objAddAdjustedItemTransactionBean.setTransactionType("Adjusted");
			objAddAdjustedItemTransactionBean.setCreatedBy(stockAdjustmentStockItemEntityTO.getLastModifiedBy());
			//objAddAdjustedItemTransactionBean.setIpAddress(request.getRemoteAddr());
			objAddAdjustedItemTransactionBean.setTransactionNotes(stockAdjustmentStockItemEntityTO.getAdjustmentNotes());
			//objAddAdjustedItemTransactionBean.setItemProcessingDetail(mapper.map(objItemOrderProcessingEntity, ItemOrderProcessingBean.class));
			ItemStockAdjustmentBean objItemStockAdjustmentBean=new ItemStockAdjustmentBean();
			objItemStockAdjustmentBean.setItemStockAdjustmentId(stockAdjustmentStockItemEntityTO.getItemStockAdjustmentId());
			objAddAdjustedItemTransactionBean.setItemStockAdjustmentDetail(objItemStockAdjustmentBean);
			objAddAdjustedItemTransactionBean.setTransactionCount(AppConstants.TRANSACTION_BEGIN);
			objAddAdjustedItemTransactionBean.setRecordType(AppConstants.RECORDTYPE_INSERT);
			objAddAdjustedItemTransactionBean.setCreatedDate(new Date());
			if(receiveOrderDao.addItemTransactionEntityDetails(mapper.map(objAddAdjustedItemTransactionBean, ItemTransactionEntity.class))) {
				resultString="ADDED";
			}
		}	
	}
		if (resultFlag2) {
			resultString = "UPDATED";
		}
		else {
			resultString = "ERROR";
		}
		return  resultString;
			}

	@Override
	@Transactional
	public List<ItemStockAdjustmentEntityTO> fetchStockAdjustmentApprovedRecords(
			ItemStockAdjustmentBean itemStockAdjustmentBean) {
		return itemStockAdjustmentApprovalDao.fetchStockAdjustmentApprovedRecords(itemStockAdjustmentBean);
	}
	
}
