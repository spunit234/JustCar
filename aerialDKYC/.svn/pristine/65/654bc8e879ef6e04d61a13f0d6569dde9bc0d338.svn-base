package com.edios.pms.dao.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.persistence.TemporalType;

import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Repository;

import com.edios.cdf.dao.impl.BaseDaoImpl;
import com.edios.cdf.entity.to.UserEntityTO;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.util.TransactionData;
import com.edios.pms.bean.ItemStockAdjustmentBean;
import com.edios.pms.dao.ItemStockAdjustmentDao;
import com.edios.pms.entity.ItemStockAdjustmentEntity;
import com.edios.pms.entity.to.ItemStockAdjustmentEntityTO;
import com.edios.pms.entity.to.ItemStockEntityTO;

@Repository
public class ItemStockAdjustmentDaoImpl extends BaseDaoImpl<ItemStockAdjustmentEntity> implements ItemStockAdjustmentDao{

	@Autowired
	MessageSource messageSource;

	@Override
	public List<ItemStockEntityTO> fetchItemStock(String itemCode, String itemName, Long pharmacyLocationId) {
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select item.itemName as itemName,item.itemCode as itemCode,stock.lotNo as lotNo,pack.packSize as packSize,stock.quantityInStock as quantityReceived,"
				+ "stock.quantityOnHand as quantityOnHand,stock.itemStockStatus as itemStockStatus,stock.itemStockId as itemStockId,stock.transactionCount as transactionCount"
				+ ",stock.expiryDate as expiryDate,(select sum(adjustmentQuantity) from ItemStockAdjustmentEntity where itemStock.itemStockId=stock.itemStockId) as adjustedQuantity "
				+ "from ItemStockEntity stock left join stock.item as item left join stock.itemPackSize as pack where item.recordType<>'D' and "
				+ "stock.pharmacyLocation.pharmacyLocationId="+pharmacyLocationId+" ";
		
		if (itemName!=null) {
			sqlQuery+="and item.itemName like '%"+itemName.trim()+"%'";
		}
		if (itemCode!=null) {
			sqlQuery+="and item.itemCode like '%"+itemCode.trim()+"%'";
		}
		List<ItemStockEntityTO> itemEntityTOList = (List<ItemStockEntityTO>) session.createQuery(sqlQuery)
				
				.setResultTransformer(Transformers.aliasToBean(ItemStockEntityTO.class)).list();
		
		return itemEntityTOList;
	}

	@Override
	public ItemStockEntityTO fetchItemStockInfo(Long id) {
		String dateFormat=messageSource.getMessage("dateFormat", null, "", Locale.US);
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select item.itemName as itemName,item.itemCode as itemCode,stock.lotNo as lotNo,pack.packSize as packSize,stock.quantityInStock as quantityReceived,"
				+ "stock.quantityOnHand as quantityOnHand,stock.itemStockStatus as itemStockStatus,stock.itemStockId as itemStockId,stock.transactionCount as transactionCount"
				+ ",stock.expiryDate as expiryDate,stock.transactionCount as transactionCount,stock.quantityAdjusted as quantityAdjusted "
				+ "from ItemStockEntity stock left join stock.item as item left join stock.itemPackSize as pack where item.recordType<>'D' and stock.itemStockId="+id+"  ";
		
		ItemStockEntityTO itemStockEntityTO=(ItemStockEntityTO) session.createQuery(sqlQuery).setResultTransformer(Transformers.aliasToBean(ItemStockEntityTO.class)).getSingleResult();
		return itemStockEntityTO;
		
	}

	@Override
	public TransactionData fetchTransactionDataById(Long itemStockId) {
		TransactionData transactionData = null;
		String sqlQuery = "";
		try {
			Session session = (Session) entityManager.getDelegate();
			sqlQuery = "select table.transactionCount as transactionCount,table.recordType as recordType "
					+ " from  ItemStockEntity table where table.itemStockId=:itemStockId";
			transactionData = (TransactionData) session.createQuery(sqlQuery).setParameter("itemStockId", itemStockId)
					.setResultTransformer(Transformers.aliasToBean(TransactionData.class)).list().get(0);
		} catch (Exception exception) {
			exception.printStackTrace();
			return null;
		}
		return transactionData;
	}

	@Override
	public boolean updateItemStock(Long itemStockId, Long itemStockQuantityOnHand, Long transactionCount,
			Long modifiedBy, Long quantityAdjusted) {
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "update ItemStockEntity set quantityOnHand="+itemStockQuantityOnHand+",transactionCount="+transactionCount+",lastModifiedBy="+modifiedBy+","
				+ "recordType='U',quantityAdjusted="+quantityAdjusted+",lastModifiedDate=:lastModifiedDate where itemStockId="+itemStockId+"";
		int resultID = session.createQuery(sqlQuery).setParameter("lastModifiedDate", new Date(), TemporalType.TIMESTAMP).executeUpdate();
		if (resultID>0) {
			return true;	
		}
		else {
			return false;
		}
		
		
	}

	@Override
	public boolean insertItemStockAdjustment(ItemStockAdjustmentEntity itemStockAdjustmentEntity) {
		Session session=(Session) entityManager.getDelegate();
		session.save(itemStockAdjustmentEntity);
		return true;
	}

	@Override
	public List<ItemStockAdjustmentEntityTO> fetchStockAdjustmentRecords(PayloadBean payloadBean,Long pharmacyLocationId) {
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  
	   	String fromDate= formatter.format(payloadBean.getFromDate())+" 00:00:00";  
	   	String toDate= formatter.format(payloadBean.getToDate())+" 23:59:59";
		String dateFormat=messageSource.getMessage("dateFormat", null, "", Locale.US);
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select item.itemName as itemName,item.itemCode as itemCode,stock.lotNo as lotNo,pack.packSize as packSize,"
				+ "stock.quantityOnHand as quantityOnHand,stockAdjustment.adjustmentQuantity as adjustmentQuantity,stockAdjustment.adjustmentNotes as adjustmentNotes,"
				+ "stock.expiryDate as expiryDate,stockAdjustment.adjustmentDate as adjustmentDate,stockAdjustment.witnessName as witnessName "
				+ "from ItemStockAdjustmentEntity stockAdjustment left join stockAdjustment.itemStock as stock left join stock.item as item left join stock.itemPackSize as pack where stockAdjustment.recordType<>'D' and "
				+ "stockAdjustment.adjustmentDate>='"+fromDate+"' and stockAdjustment.adjustmentDate<='"+toDate+"' and stock.pharmacyLocation.pharmacyLocationId="+pharmacyLocationId+"";
		
		
		List<ItemStockAdjustmentEntityTO> itemEntityTOList = (List<ItemStockAdjustmentEntityTO>) session.createQuery(sqlQuery)
				
				.setResultTransformer(Transformers.aliasToBean(ItemStockAdjustmentEntityTO.class)).list();
		
		return itemEntityTOList;
	}

	@Override
	public List<UserEntityTO> fetchuserlist(String values) {
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select user.userID as userID,RTRIM(concat(user.firstName,' ',coalesce(user.lastName,''))) as fullName from UserEntity user left join RoleEntity as role on user.defaultRoleID=role.roleID "
				+ " where role.roleName IN ("+values+") and user.userStatus='Active' and user.recordType<>'D'";
		
		return (List<UserEntityTO>) session.createQuery(sqlQuery).setResultTransformer(Transformers.aliasToBean(UserEntityTO.class)).list();
		 
	}

	@Override
	public List<ItemStockAdjustmentEntityTO> fetchApprovalRoleList(PayloadBean payloadBean) {
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select parList.parameterListValue as value,parList.parameterListValue as label from ApplicationParameterListEntity parList left join parList.parameterID as param "
				+ " where param.parameterName='"+payloadBean.getSearchParameter()+"' and parList.recordType<>'D'";
		
		return (List<ItemStockAdjustmentEntityTO>) session.createQuery(sqlQuery).setResultTransformer(Transformers.aliasToBean(ItemStockAdjustmentEntityTO.class)).list();
	}

	@Override
	public String fetchApplicationParameterValues(String searchParameter) {
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select apv.parameterValue as roleName"
		+ " from ApplicationParameterValuesEntity apv left join apv.parameterID as ap where ap.parameterCode='"+searchParameter+"'";
		
		
		return (String) session.createQuery(sqlQuery).uniqueResult();

				
	
	}

	@Override
	public Long fetchPharmacyLocationId(Long user) {
		Session session = (Session) entityManager.getDelegate();
		String sqlQuery ="select locationUser.pharmacyLocation.pharmacyLocationId FROM PharmacyLocationUserEntity locationUser where locationUser.userId.userID="+user+" "
				+ "and locationUser.recordType<>'D'";
		return (Long) session.createQuery(sqlQuery).getSingleResult();
	}

	@Override
	public Long checkPendingRequestInStockAdjustment(PayloadBean payloadBean) {
		Session session = (Session) entityManager.getDelegate();
		String sqlQuery ="select count(itemStockAdjustmentId) from ItemStockAdjustmentEntity where itemStock.itemStockId=:itemStockId and recordType<>'D' and "
				+ "adjustmentStatus='Pending'";
		return (Long) session.createQuery(sqlQuery).setParameter("itemStockId", payloadBean.getId()).getSingleResult();
		
	}
	
	

}
