package com.edios.pms.dao.impl;

import java.text.SimpleDateFormat;
import java.util.List;

import javax.persistence.NoResultException;

import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Repository;

import com.edios.cdf.dao.impl.BaseDaoImpl;
import com.edios.cdf.util.DeleteRecords;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.util.TransactionData;
import com.edios.pms.dao.PreparedCompoundItemDao;
import com.edios.pms.entity.CompoundItemDetailEntity;
import com.edios.pms.entity.CompoundItemEntity;
import com.edios.pms.entity.PreparedCompoundItemDetailEntity;
import com.edios.pms.entity.PreparedCompoundItemEntity;
import com.edios.pms.entity.to.CompoundItemEntityTO;
import com.edios.pms.entity.to.ConfigureCompoundItemsTO;
import com.edios.pms.entity.to.ItemEntityTO;

@Repository
public class PreparedCompoundItemDaoImpl extends BaseDaoImpl<PreparedCompoundItemEntity> implements PreparedCompoundItemDao {
	@Autowired
	MessageSource messageSource;
	

	@Override
	public boolean isPreparedCompoundItemNameExist(Long compoundItemId,Long preparedItemId) {
		try {
			return entityManager.createQuery(
					"select table.preparedItemId as preparedItemId from PreparedCompoundItemEntity table where "
							+ " table.compoundItem.compoundItemId=" + compoundItemId+" and table.preparedItemId!="+preparedItemId)
					.getSingleResult() == null ? false : true;
		} catch (NoResultException ex) {
			return false;
		} 
	}

	@Override
	public Long addPreparedCompoundItemEntity(PreparedCompoundItemEntity objPreparedCompoundItemEntity) {
		entityManager.persist(objPreparedCompoundItemEntity);
		return objPreparedCompoundItemEntity.getPreparedItemId();
	}

	@Override
	public boolean addPreparedCompoundItemDetailEntity(PreparedCompoundItemDetailEntity objPreparedCompoundItemDetailEntity) {
		entityManager.persist(objPreparedCompoundItemDetailEntity);
		return true;
	}

	@Override
	public List<CompoundItemEntityTO> fetchConfiguredCompoundItemdetails(PayloadBean payloadBean) {
		List<CompoundItemEntityTO> objCompoundItemEntityTOList = null;
		String sqlQuery = "",whereClause="";
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select compoundItem.compoundItemId as compoundItemId,item.itemName as itemName,item.itemCode as itemCode,item.measurementUnit as measurementUnit,"
					+ "compoundItem.compoundQuantity as compoundQuantity,packSizeDetail.packSize as packSize,packSizeDetail.packSizeId as packSizeId,compoundItem.unitCost as unitCost"
					+ " from CompoundItemEntity compoundItem"
					+ " left join compoundItem.item item"
					+ " left join compoundItem.itemPackSize packSizeDetail"
						+ " where compoundItem.recordType<>'D'";
			objCompoundItemEntityTOList = (List<CompoundItemEntityTO>) session.createQuery(sqlQuery)
					.setResultTransformer(Transformers.aliasToBean(CompoundItemEntityTO.class)).list();
			
			
		
		return objCompoundItemEntityTOList;
	}
	
	@Override
	public List<CompoundItemEntityTO> fetchConfiguredCompoundItemDetailsByCompoundItemId(Long compounItemId) {
		List<CompoundItemEntityTO> objCompoundItemEntityTOList = null;
		String sqlQuery = "",whereClause="";
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select item.itemName as itemName,compoundItemDetail.mixedQuantity as mixedQuantity"
					+ " from CompoundItemDetailEntity compoundItemDetail"
					+ " left join compoundItemDetail.compoundItem compoundItem"
					+ " left join compoundItemDetail.item item"
						+ " where compoundItemDetail.recordType<>'D' and compoundItem.compoundItemId="+compounItemId;
			objCompoundItemEntityTOList = (List<CompoundItemEntityTO>) session.createQuery(sqlQuery)
					.setResultTransformer(Transformers.aliasToBean(CompoundItemEntityTO.class)).list();
			
			
		
		return objCompoundItemEntityTOList;
	}

	@Override
	public List<CompoundItemEntityTO> fetchItemDetailsToPreparedConfigureCompoundItem(PayloadBean payloadBean) {
		List<CompoundItemEntityTO> objCompoundItemEntityTOList = null;
		String sqlQuery = "",whereClause="";
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select item.itemName as itemName,item.itemCode as itemCode,compoundItemDetail.mixedQuantity as mixedQuantity"
					+ ",sum(itemStock.quantityOnHand) as quantityOnHand,itemStock.itemPackSize.packSize as packSize,itemStock.lotNo as lotNo"
					+ ",itemStock.expiryDate as expiryDate"
					+ " from CompoundItemDetailEntity compoundItemDetail"
					+ " left join compoundItemDetail.compoundItem compoundItem"
					+ " left join compoundItemDetail.item item"
					+ " inner join ItemStockEntity itemStock on itemStock.item.itemId=item.itemId"
					+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on itemStock.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId "
					+ " where compoundItemDetail.itemPackSize=itemStock.itemPackSize and compoundItemDetail.recordType<>'D' "
					+ "and compoundItem.compoundItemId="+payloadBean.getId() +" and pharmacyLocationUser.userId.userID=:userID and item.itemId="+payloadBean.getCustomParameter()
							+ " group by item.itemName,item.itemCode,compoundItemDetail.mixedQuantity,itemStock.itemPackSize.packSize,itemStock.lotNo,itemStock.expiryDate";
			objCompoundItemEntityTOList = (List<CompoundItemEntityTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getUserId())
					.setResultTransformer(Transformers.aliasToBean(CompoundItemEntityTO.class)).list();
			
			
		
		return objCompoundItemEntityTOList;
	}
	@Override
	public List<CompoundItemEntityTO> fetchConfigureItemDetails(PayloadBean payloadBean) {
		List<CompoundItemEntityTO> objCompoundItemEntityTOList = null;
		String sqlQuery = "",whereClause="";
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select item.itemId as itemId,item.itemName as itemName,item.itemCode as itemCode,compoundItemDetail.mixedQuantity as mixedQuantity,compoundItemDetail.mixedQuantity as requiredQuantity"
					+ ",sum(itemStock.quantityOnHand) as quantityOnHand,itemStock.itemPackSize.packSize as packSize"
					+ " from CompoundItemDetailEntity compoundItemDetail"
					+ " left join compoundItemDetail.compoundItem compoundItem"
					+ " left join compoundItemDetail.item item"
					+ " inner join ItemStockEntity itemStock on itemStock.item.itemId=item.itemId"
					+ " inner join PharmacyLocationUserEntity pharmacyLocationUser on itemStock.pharmacyLocation.pharmacyLocationId= pharmacyLocationUser.pharmacyLocation.pharmacyLocationId "
					+ " where compoundItemDetail.itemPackSize=itemStock.itemPackSize and compoundItemDetail.recordType<>'D' "
					+ "and compoundItem.compoundItemId="+payloadBean.getId() +" and pharmacyLocationUser.userId.userID=:userID"
							+ " group by item.itemId,item.itemName,item.itemCode,compoundItemDetail.mixedQuantity,itemStock.itemPackSize.packSize";
			objCompoundItemEntityTOList = (List<CompoundItemEntityTO>) session.createQuery(sqlQuery).setParameter("userID", payloadBean.getUserId())
					.setResultTransformer(Transformers.aliasToBean(CompoundItemEntityTO.class)).list();
			
			
		
		return objCompoundItemEntityTOList;
	}
	
	

	/*@Override
	public List<CompoundItemEntityTO> getCompoundItemDetails(ConfigureCompoundItemsTO payloadBean) {
		List<CompoundItemEntityTO> objCompoundItemEntityTOList = null;
		String sqlQuery = "",whereClause="";
		if(payloadBean.getItem()!=null) {
			whereClause=" and item.itemId = "+payloadBean.getItem().getItemId();
		}	
		 SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  
    	 String fromDate= formatter.format(payloadBean.getConfigurationFromDate())+" 00:00:00";  
		 String toDate= formatter.format(payloadBean.getConfigurationTODate())+" 23:59:59";
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select count(compoundItemDetail.compoundItemDetailId) as noOfMixedItems,compoundItemBean.compoundItemId as compoundItemId,item.itemName as itemName,item.itemCode as itemCode,"
					+ "compoundItemBean.configurationDate as configurationDate,packSizeDetail.packSize as packSize"
					+ " from CompoundItemDetailEntity compoundItemDetail"
					+ " right join compoundItemDetail.compoundItem compoundItemBean"
					+ " left join compoundItemBean.item item"
					+ " left join compoundItemBean.itemPackSize packSizeDetail"
						+ " where compoundItemBean.recordType<>'D' and compoundItemBean.configurationDate between '"+fromDate+"' and '"+toDate+"' "+whereClause+" group by compoundItemBean.compoundItemId,item.itemName,item.itemCode,compoundItemBean.configurationDate,packSizeDetail.packSize  order by compoundItemBean.compoundItemId asc";
			objCompoundItemEntityTOList = (List<CompoundItemEntityTO>) session.createQuery(sqlQuery)
					.setResultTransformer(Transformers.aliasToBean(CompoundItemEntityTO.class)).list();
			
			
		
		return objCompoundItemEntityTOList;
	}

	@Override
	public CompoundItemEntity findCompoundItemBeanDetailsById(Long compoundItemId) {
		return entityManager.find(CompoundItemEntity.class, compoundItemId);
	}
	
	@Override
	public TransactionData fetchTransactionDataById(Long id) {

		TransactionData transactionData = null;
		String sqlQuery = "";
		
			Session session = (Session) entityManager.getDelegate();
			sqlQuery = "select table.transactionCount as transactionCount,table.recordType as recordType"
					+ " from  CompoundItemEntity table where table.compoundItemId=:compoundItemId";
			transactionData = (TransactionData) session.createQuery(sqlQuery).setParameter("compoundItemId", id)
					.setResultTransformer(Transformers.aliasToBean(TransactionData.class)).list().get(0);
		
		return transactionData;
	
	}

	@Override
	public TransactionData fetchTransactionDataByCompoundItemDetailId(Long id) {

		TransactionData transactionData = null;
		String sqlQuery = "";
		
			Session session = (Session) entityManager.getDelegate();
			sqlQuery = "select table.transactionCount as transactionCount,table.recordType as recordType"
					+ " from  CompoundItemDetailEntity table where table.compoundItemDetailId=:compoundItemDetailId";
			transactionData = (TransactionData) session.createQuery(sqlQuery).setParameter("compoundItemDetailId", id)
					.setResultTransformer(Transformers.aliasToBean(TransactionData.class)).list().get(0);
		
		return transactionData;
	
	}

	@Override
	public boolean updateCompoundItemEntity(CompoundItemEntity objCompoundItemEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.update(objCompoundItemEntity);
		return true;
	}

	@Override
	public boolean updateCompoundItemDetailEntity(CompoundItemDetailEntity objCompoundItemDetailEntity) {
		Session session = (Session) entityManager.getDelegate();
		session.update(objCompoundItemDetailEntity);
		return true;
	}

	@Override
	public boolean deleteCompoundItemDetailsById(DeleteRecords deleteRecords) {
		String sqlQuery="";
		int count=0;
		Session session = (Session) entityManager.getDelegate();
		sqlQuery ="delete from CompoundItemDetailEntity"
				+ " where compoundItemDetailId=:compoundItemDetailId";
		 count=session.createQuery(sqlQuery).setParameter("compoundItemDetailId", deleteRecords.getId())
				.executeUpdate();
		 if(count>0)
			 return true;
		 else
			 return false;
	}
	*/
	
	
	
	
}
