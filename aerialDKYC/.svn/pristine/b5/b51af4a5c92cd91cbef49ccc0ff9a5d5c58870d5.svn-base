package com.edios.pms.manager.impl;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.edios.cdf.manager.impl.AbstractManagerImpl;
import com.edios.cdf.util.PayloadBean;
import com.edios.pms.bean.InventoryCountBean;
import com.edios.pms.dao.CycleCountDao;
import com.edios.pms.dao.ExportNonDashboardReportDao;
import com.edios.pms.dao.PatientDispensingDao;
import com.edios.pms.dao.PhysicalCountDao;
import com.edios.pms.entity.InventoryCountEntity;
import com.edios.pms.entity.to.PatientDispensedItemsTO;
import com.edios.pms.entity.to.PatientEntityTO;
import com.edios.pms.entity.to.PhysicalCountEntityTo;
import com.edios.pms.entity.to.ReportsTO;
import com.edios.pms.manager.ExportNonDashBoardReportManager;

@Service
public class ExportNonDashboardReportManagerImpl extends AbstractManagerImpl<InventoryCountBean,InventoryCountEntity> implements ExportNonDashBoardReportManager{

	@Autowired
	ExportNonDashboardReportDao exportNonDashboardReportDao;
	
	@Autowired
	PhysicalCountDao physicalCountDao;
	
	@Autowired 
	CycleCountDao cycleCountDao;
	
	@Autowired 
	PatientDispensingDao patientDispensingDao;

	@Override
	@Transactional
	public List<PhysicalCountEntityTo> fetchPhysicalCountDetails(PayloadBean payloadBean) {
		Long locationID =  physicalCountDao.fetchPharmacyLocationID(payloadBean.getId());
		 List<PhysicalCountEntityTo> physicalCountList = physicalCountDao.searchPhysicalCount(payloadBean,locationID);
		 for(PhysicalCountEntityTo physicalCountEntityTo:physicalCountList) {
			List<ReportsTO> invCountMismatchedList = exportNonDashboardReportDao.fetchInvMimatchedItems(physicalCountEntityTo.getInvCountId());
			 physicalCountEntityTo.getInvCountMimatchList().addAll(invCountMismatchedList);
		 }
		 return physicalCountList;
	}

	@Override
	@Transactional
	public List<PhysicalCountEntityTo> fetchCycleCountDetails(PayloadBean payloadBean) {
		Long locationID =  cycleCountDao.fetchPharmacyLocationID(payloadBean.getId());
		 List<PhysicalCountEntityTo> cycleCountList = cycleCountDao.searchCycleCount(payloadBean,locationID);
		 for(PhysicalCountEntityTo physicalCountEntityTo:cycleCountList) {
				List<ReportsTO> invCountMismatchedList = exportNonDashboardReportDao.fetchInvMimatchedItems(physicalCountEntityTo.getInvCountId());
				 physicalCountEntityTo.getInvCountMimatchList().addAll(invCountMismatchedList);
			 }
		 return cycleCountList;
	}

	@Override
	@Transactional
	public List<PatientDispensedItemsTO> exportDispensedMedicationToPatient(PatientDispensedItemsTO objPatientDispensedItemsTO,HttpServletRequest httpServletRequest) {
		// TODO Auto-generated method stub
		PayloadBean objPayloadBean=new PayloadBean();
		objPayloadBean.setId(objPatientDispensedItemsTO.getUserId());
		PatientEntityTO objPatientEntityTO=patientDispensingDao.getGenderDetailOfWorkStation(objPayloadBean, httpServletRequest);
		PatientEntityTO patientInfo=exportNonDashboardReportDao.getPatientAndPrescribedDetails(objPatientDispensedItemsTO.getPatientPrescriptionId());
		List<PatientDispensedItemsTO> objPatientDispensedItemsTOList=exportNonDashboardReportDao.exportDispensedMedicationToPatient(objPatientDispensedItemsTO);
		objPatientDispensedItemsTO=objPatientDispensedItemsTOList.get(0);
		objPatientDispensedItemsTO.setPharmacyLocationName(objPatientEntityTO.getPharmacyLocationName());
		objPatientDispensedItemsTO.setWorkStationName(objPatientEntityTO.getWorkStationName());
		objPatientDispensedItemsTO.setPatientNo(patientInfo.getPatientNo());
		objPatientDispensedItemsTO.setPatientName(patientInfo.getPatientName());
		objPatientDispensedItemsTO.setPrescriptionNo(patientInfo.getPrescriptionNo());
		objPatientDispensedItemsTO.setPrescriptionDate(new Date(patientInfo.getPrescriptionDateTime()));
		return objPatientDispensedItemsTOList;
	}
	
}
