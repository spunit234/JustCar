package com.edios.pms.manager.impl;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.edios.cdf.manager.impl.AbstractManagerImpl;
import com.edios.cdf.util.AppConstants;
import com.edios.cdf.util.DeleteRecords;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.util.TransactionData;
import com.edios.cdf.util.TransactionFailedException;
import com.edios.pms.bean.CompoundCompositeItemBean;
import com.edios.pms.bean.CompoundItemBean;
import com.edios.pms.bean.CompoundItemDetailBean;
import com.edios.pms.bean.ItemPackSizeBean;
import com.edios.pms.dao.CompoundItemDao;
import com.edios.pms.entity.CompoundItemDetailEntity;
import com.edios.pms.entity.CompoundItemEntity;
import com.edios.pms.entity.to.CompoundItemEntityTO;
import com.edios.pms.entity.to.ConfigureCompoundItemsTO;
import com.edios.pms.entity.to.ItemEntityTO;
import com.edios.pms.manager.CompoundItemManager;

@Service("compoundItemManagerImpl")
public class CompoundItemManagerImpl extends AbstractManagerImpl<CompoundItemBean,CompoundItemEntity > implements CompoundItemManager {

	@Autowired
	CompoundItemDao compoundItemDao;
	
	@Autowired
	MessageSource messageSource;
	
	
	@Override
	@Transactional
	public List<ItemEntityTO> getCompoundItemDetails(PayloadBean payloadBean) {
		// TODO Auto-generated method stub
		return compoundItemDao.getCompoundItemDetails(payloadBean);
	}
	
	@Override
	@Transactional
	public List<ItemEntityTO> getItemDetailsWithCombinationStatus(PayloadBean payloadBean) {
		// TODO Auto-generated method stub
		return compoundItemDao.getItemDetailsWithCombinationStatus(payloadBean);
	}

	@Override
	@Transactional
	public List<CompoundItemEntityTO> getCompoundItemDetails(ConfigureCompoundItemsTO payloadBean) {
		// TODO Auto-generated method stub
		return compoundItemDao.getCompoundItemDetails(payloadBean);
	}
	
	
	@Override
	@Transactional
	public String addCompoundItem(CompoundCompositeItemBean objCompoundCompositeItemBean, HttpServletRequest request) {
		// TODO Auto-generated method stub
		String resultString=null;
		CompoundItemBean objCompoundItemBean=objCompoundCompositeItemBean.getObjCompoundItemBean();
		
		if(compoundItemDao.isCompoundItemNameExist(objCompoundItemBean.getItem().getItemId(),objCompoundItemBean.getCompoundItemId())) {
			return "NameAlreadyExist";
		}
		objCompoundItemBean.setIpAddress(request.getRemoteAddr());
		setAuditInfoOfCompoundItemBean(objCompoundItemBean, "newFlag");
		Long compountItemId=compoundItemDao.addCompoundItemEntity(mapper.map(objCompoundItemBean, CompoundItemEntity.class));
		if(compountItemId!=null) {
			resultString="ADDED";
			objCompoundItemBean.setCompoundItemId(compountItemId);
			for(CompoundItemDetailBean objCompoundItemDetailBean:objCompoundCompositeItemBean.getObjCompoundItemDetailBeanList()) {
				objCompoundItemDetailBean.setCompoundItem(objCompoundItemBean);
				objCompoundItemDetailBean.setIpAddress(objCompoundItemBean.getIpAddress());
				objCompoundItemDetailBean.setCreatedBy(objCompoundItemBean.getCreatedBy());
				setAuditInfoOfCompoundItemDetailBean(objCompoundItemDetailBean, "newFlag");
				if(compoundItemDao.addCompoundItemDetailEntity(mapper.map(objCompoundItemDetailBean, CompoundItemDetailEntity.class))) {
					resultString="ADDED";
				}
			}
		}
		return resultString;
	}
	
	@Override
	@Transactional
	public CompoundCompositeItemBean findCompoundItemBeanDetailsById(Long compoundItemId) {
		// TODO Auto-generated method stub
		CompoundCompositeItemBean objCompoundCompositeItemBean=new CompoundCompositeItemBean();
		List<CompoundItemDetailBean> objCompoundItemDetailBeanList=new ArrayList<>();
		CompoundItemBean objCompoundItemBean=mapper.map(compoundItemDao.findCompoundItemBeanDetailsById(compoundItemId),CompoundItemBean.class);
		
		ItemPackSizeBean objCompoundItemPackSizeBean=new ItemPackSizeBean();
		objCompoundItemPackSizeBean.setPackSizeId(objCompoundItemBean.getItemPackSize().getPackSizeId());
		objCompoundItemPackSizeBean.setPackSize(objCompoundItemBean.getItemPackSize().getPackSize());
		objCompoundItemBean.setItemPackSize(objCompoundItemPackSizeBean);
		System.out.println(objCompoundItemPackSizeBean.getPackSizeId());
		for(CompoundItemDetailBean objCompoundItemDetailBean:objCompoundItemBean.getCompoundItemDetails()) {
			objCompoundItemDetailBean.setItemName(objCompoundItemDetailBean.getItem().getItemName());
			objCompoundItemDetailBean.setItemCode(objCompoundItemDetailBean.getItem().getItemCode());
			
			ItemPackSizeBean objItemPackSizeBean=new ItemPackSizeBean();
			objItemPackSizeBean.setPackSizeId(objCompoundItemDetailBean.getItemPackSize().getPackSizeId());
			objItemPackSizeBean.setPackSize(objCompoundItemDetailBean.getItemPackSize().getPackSize());
			
			objCompoundItemDetailBean.setPackSize(objCompoundItemDetailBean.getItemPackSize().getPackSize());
			objCompoundItemDetailBean.setItemPackSize(objItemPackSizeBean);
			objCompoundItemDetailBeanList.add(objCompoundItemDetailBean);
		}
		objCompoundItemBean.setCompoundItemDetails(null);
		objCompoundCompositeItemBean.setObjCompoundItemBean(objCompoundItemBean);
		objCompoundCompositeItemBean.setObjCompoundItemDetailBeanList(objCompoundItemDetailBeanList);
		return objCompoundCompositeItemBean;
	}

	

	@Override
	@Transactional(rollbackFor = TransactionFailedException.class)
	public String updateCompoundItemDetails(CompoundCompositeItemBean CompoundCompositeItemBean,
			HttpServletRequest request) throws TransactionFailedException {
		String resultString=null;
		CompoundItemBean objCompoundItemBean=CompoundCompositeItemBean.getObjCompoundItemBean();
		
		if(compoundItemDao.isCompoundItemNameExist(objCompoundItemBean.getItem().getItemId(),objCompoundItemBean.getCompoundItemId())) {
			return "NameAlreadyExist";
		}
		TransactionData latestData = compoundItemDao.fetchTransactionDataById(objCompoundItemBean.getCompoundItemId());
		if (latestData.getTransactionCount() > (objCompoundItemBean.getTransactionCount())) {
			return "TransactionFailed";
		}
		if (latestData.getRecordType() == 'D') {
			return "recordDeleted";
		}
		objCompoundItemBean.setIpAddress(request.getRemoteAddr());
		setAuditInfoOfCompoundItemBean(objCompoundItemBean, "editFlag");
		if(compoundItemDao.updateCompoundItemEntity(mapper.map(objCompoundItemBean, CompoundItemEntity.class))) {
			resultString="UPDATED";
			for(CompoundItemDetailBean objCompoundItemDetailBean:CompoundCompositeItemBean.getObjCompoundItemDetailBeanList()) {
				if(objCompoundItemDetailBean.getCompoundItemDetailId()==null) {
					objCompoundItemDetailBean.setCompoundItem(objCompoundItemBean);
					objCompoundItemDetailBean.setIpAddress(objCompoundItemBean.getIpAddress());
					objCompoundItemDetailBean.setCreatedBy(objCompoundItemBean.getCreatedBy());
					setAuditInfoOfCompoundItemDetailBean(objCompoundItemDetailBean, "newFlag");
					if(compoundItemDao.addCompoundItemDetailEntity(mapper.map(objCompoundItemDetailBean, CompoundItemDetailEntity.class))) {
						resultString="ADDED";
					}
				}
				else {
					TransactionData latestCompoundItemDetailData = compoundItemDao.fetchTransactionDataByCompoundItemDetailId(objCompoundItemDetailBean.getCompoundItemDetailId());
					if (latestCompoundItemDetailData.getTransactionCount() > (objCompoundItemDetailBean.getTransactionCount())) {
						throw new TransactionFailedException(messageSource.getMessage("transactionFailedUpdateMessage", null, "", Locale.US));
					}
					if (latestData.getRecordType() == 'D') {
						throw new TransactionFailedException(messageSource.getMessage("transactionFailedDeleteMessage", null, "", Locale.US));
					}
					objCompoundItemDetailBean.setIpAddress(request.getRemoteAddr());
					objCompoundItemDetailBean.setLastModifiedBy(objCompoundItemBean.getLastModifiedBy());
					setAuditInfoOfCompoundItemDetailBean(objCompoundItemDetailBean, "editFlag");
					if(compoundItemDao.updateCompoundItemDetailEntity(mapper.map(objCompoundItemDetailBean, CompoundItemDetailEntity.class))) {
						resultString="UPDATED";
					}
				}
				
			}
		}
		
		
		return resultString;
	}
	
	private void setAuditInfoOfCompoundItemBean(CompoundItemBean CompoundItemBean, String string) {
		if (string.equalsIgnoreCase("newFlag")) {
			CompoundItemBean.setTransactionCount(AppConstants.TRANSACTION_BEGIN);
			CompoundItemBean.setRecordType(AppConstants.RECORDTYPE_INSERT);
			CompoundItemBean.setCreatedDate(new Date());
		} else {
			CompoundItemBean.setTransactionCount(CompoundItemBean.getTransactionCount() + AppConstants.TRANSACTION_BEGIN);
			CompoundItemBean.setRecordType(AppConstants.RECORDTYPE_UPDATE);
			CompoundItemBean.setLastModifiedDate(new Date());
		}

	}
	private void setAuditInfoOfCompoundItemDetailBean(CompoundItemDetailBean CompoundItemDetailBean, String string) {
		if (string.equalsIgnoreCase("newFlag")) {
			CompoundItemDetailBean.setTransactionCount(AppConstants.TRANSACTION_BEGIN);
			CompoundItemDetailBean.setRecordType(AppConstants.RECORDTYPE_INSERT);
			CompoundItemDetailBean.setCreatedDate(new Date());
		} else {
			CompoundItemDetailBean.setTransactionCount(CompoundItemDetailBean.getTransactionCount() + AppConstants.TRANSACTION_BEGIN);
			CompoundItemDetailBean.setRecordType(AppConstants.RECORDTYPE_UPDATE);
			CompoundItemDetailBean.setLastModifiedDate(new Date());
		}

	}

	@Override
	@Transactional
	public String deleteCompoundItemDetailsById(DeleteRecords deleteRecords) {
		String resultOutput="";
		if(compoundItemDao.deleteCompoundItemDetailsById(deleteRecords)) {
			resultOutput="DELETED";
		}
		return resultOutput;
	}

	
	
	
	
	/*


	@Override
	@Transactional
	public String deleteItemOrderDetailsById(DeleteRecords deleteRecords) {
		String resultOutput="";
		if(createOrderDao.deleteItemOrderDetailsById(deleteRecords)) {
			resultOutput="DELETED";
		}
		return resultOutput;
	}*/
}
