package com.edios.pms.dao.impl;

import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Locale;

import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Repository;
import com.edios.cdf.dao.impl.BaseDaoImpl;
import com.edios.cdf.util.PayloadBean;
import com.edios.pms.dao.ItemsConsumptionReportDao;
import com.edios.pms.entity.ItemStockEntity;
import com.edios.pms.entity.to.ItemStockEntityTO;

@Repository
public class ItemsConsumptionReportDaoImpl extends BaseDaoImpl<ItemStockEntity> implements ItemsConsumptionReportDao {
	
	@Autowired
	MessageSource messageSource;

	@Override
	public List<ItemStockEntityTO> fetchItemsConsumptionReport(PayloadBean payloadBean, Long pharmacyLocationId) {
		List<ItemStockEntityTO> itemEntityTOList = null;
		String dateFormat=messageSource.getMessage("dateFormat", null, "", Locale.US);
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  
	   	String fromDate= formatter.format(payloadBean.getFromDate())+" 00:00:00";  
	   	String toDate= formatter.format(payloadBean.getToDate())+" 23:59:59";
		String sqlQuery = "";
		Session session = (Session) entityManager.getDelegate();
		sqlQuery = "select item.itemName as itemName,item.itemCode as itemCode,sum(dispense.dispensedQuantity) as dispensedQuantitySum, dispense.dispensedDateTime as dispensedMonth,"
				+ "stock.itemStockId as itemStockId,stock.lotNo AS lotNo,stock.expiryDate as expiryDate,stock.unitCost as unitCost,stock.quantityInStock as quantityReceived,"
				+ "pack.packSize as packSize,((stock.quantityInStock/pack.packSize)*stock.unitCost) as totalReceivedCost  "
				+ " from PatientDispensedItemEntity dispense left join dispense.itemStock as stock left join stock.item as item left join stock.itemPackSize as pack "
				+ " where dispense.dispensedDateTime>='"+fromDate+"' and dispense.dispensedDateTime<='"+toDate+"' and  stock.pharmacyLocation.pharmacyLocationId="+pharmacyLocationId+" ";
		if (payloadBean.getSearchParameter()!=null) {
			sqlQuery+="and item.itemName like '%"+payloadBean.getSearchParameter()+"%'";
		}
		
		sqlQuery+=" group by stock.itemStockId,SUBSTRING(CAST(dispense.dispensedDateTime AS string), 1, 7), item.itemName,item.itemCode,"
				+ "dispense.dispensedDateTime,stock.lotNo,stock.expiryDate,stock.unitCost,stock.quantityInStock,pack.packSize order by stock.itemStockId ";
		
		itemEntityTOList = (List<ItemStockEntityTO>) session.createQuery(sqlQuery)
				
				.setResultTransformer(Transformers.aliasToBean(ItemStockEntityTO.class)).list();
		
		return itemEntityTOList;
	}

	@Override
	public Long fetchPharmacyLocationId(Long id) {
		Session session = (Session) entityManager.getDelegate();
		String sqlQuery ="select locationUser.pharmacyLocation.pharmacyLocationId FROM PharmacyLocationUserEntity locationUser where locationUser.userId.userID="+id+" "
				+ "and locationUser.recordType<>'D'";
		return (Long) session.createQuery(sqlQuery).getSingleResult();
	}

}
