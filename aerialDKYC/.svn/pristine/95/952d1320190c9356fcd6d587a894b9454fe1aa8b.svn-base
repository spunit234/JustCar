package com.edios.pms.dao.impl;

import java.util.Date;
import java.util.List;

import javax.persistence.NoResultException;
import javax.persistence.TemporalType;

import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Repository;
import com.edios.cdf.dao.impl.BaseDaoImpl;
import com.edios.cdf.util.DbCustomFunctions;
import com.edios.cdf.util.DeleteRecords;
import com.edios.cdf.util.PayloadBean;
import com.edios.cdf.util.TransactionData;
import com.edios.pms.bean.PharmacyLocationBean;
import com.edios.pms.dao.PhamacyLocationsDao;
import com.edios.pms.dao.UserActivityDetailsManagerDao;
import com.edios.pms.entity.PharmacyLocationEntity;
import com.edios.pms.entity.PharmacyLocationRobotEntity;
import com.edios.pms.entity.PharmacyStoreEntity;
import com.edios.pms.entity.to.PharmacyLocationEntityTO;
import com.edios.pms.entity.to.PharmacyStoreTO;

@Repository
public class PharmacyLocationsDaoImpl extends BaseDaoImpl<PharmacyLocationEntity> implements PhamacyLocationsDao {

	@Autowired
	MessageSource messageSource;
	
	@Autowired
	UserActivityDetailsManagerDao userActivityDetailsManagerDao;
	
	DbCustomFunctions dbCustomFunctions = new DbCustomFunctions();
	
	@SuppressWarnings({ "deprecation", "unchecked" })
	@Override
	public List<PharmacyLocationEntityTO> fetchPharmacyLocations(PayloadBean payloadBean) {
		List<PharmacyLocationEntityTO> pharmacyLocationEntityTOList = null;
		String sqlQuery = "";
		try {
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="select pharmacyLocation.pharmacyLocationId as pharmacyLocationId,pharmacyLocation.pharmacyLocationName as pharmacyLocationName,pharmacyLocation.pharmacyLocationCode as pharmacyLocationCode,"
					+ "pharmacyLocation.contactPersonName as contactPersonName,pharmacyLocation.contactPersonPhone as contactPersonPhone,pharmacyLocation.pharmacyLocationStatus as pharmacyLocationStatus,site.siteName as siteName,"
					+ "pharmacyLocation.transactionCount as transactionCount from PharmacyLocationEntity pharmacyLocation left join pharmacyLocation.siteId as site where pharmacyLocation.pharmacyLocationStatus=:pharmacyLocationStatus and pharmacyLocation.recordType<>'D'";
					 
			pharmacyLocationEntityTOList = (List<PharmacyLocationEntityTO>) session.createQuery(sqlQuery).setParameter("pharmacyLocationStatus", payloadBean.getSearchParameter()).setResultTransformer(Transformers.aliasToBean(PharmacyLocationEntityTO.class)).list();
			if (payloadBean.getActivityFlag()) {
				String sql = dbCustomFunctions.toSql(session, session.createQuery(sqlQuery).getQueryString());
				String tablename = 	dbCustomFunctions.getTableName(PharmacyLocationEntity.class);
				String columnName = dbCustomFunctions.getPkColumnName(PharmacyLocationEntity.class, session);
				 userActivityDetailsManagerDao.insertScreenActivity(payloadBean.getLoginDetailId(), payloadBean.getScreenName(),payloadBean.getActivityName(), sql,(long) (pharmacyLocationEntityTOList.size()), tablename, columnName, null, null,null);	
			}
		}catch (Exception exception) {
			exception.printStackTrace();
			return null;
		}		
		return pharmacyLocationEntityTOList;
	}

	@Override
	public TransactionData fetchTransactionDataById(Long id) {
		TransactionData transactionData = null;
		String sqlQuery = "";
		try {
			Session session = (Session) entityManager.getDelegate();
			sqlQuery = "select table.transactionCount as transactionCount,table.recordType as recordType "
					+ " from  PharmacyLocationEntity table where table.pharmacyLocationId="+id+"";
			transactionData = (TransactionData) session.createQuery(sqlQuery).setResultTransformer(Transformers.aliasToBean(TransactionData.class)).getSingleResult();
		} catch (Exception exception) {
			exception.printStackTrace();
			return null;
		}
		return transactionData;
	}

	@Override
	public boolean deletePharmacyLocation(DeleteRecords  deleteRecords, String ipAddress) {
		boolean result = true;
		try {
			Session session = (Session) entityManager.getDelegate();
			String tablename = 	dbCustomFunctions.getTableName(PharmacyLocationEntity.class);
			String columnName = dbCustomFunctions.getPkColumnName(PharmacyLocationEntity.class, session);
			Long pkActivityId = userActivityDetailsManagerDao.insertScreenActivity(deleteRecords.getLoginDetailId(), deleteRecords.getScreenName(),deleteRecords.getActivityName(), null,null, tablename, columnName, deleteRecords.getId(), null,null);

			String hql = "update PharmacyLocationEntity le set le.lastModifiedDate=:lastModifiedDate"
					+ " , le.recordType='D' , le.lastModifiedBy=:lastModifiedBy,le.ipAddress=:ipAddress,le.userActivityId=:userActivityId"
					+ " WHERE le.pharmacyLocationId=:pharmacyLocationId";
			
			 session.createQuery(hql).setParameter("lastModifiedBy",(long) deleteRecords.getModifiedBy())
			 .setParameter("ipAddress", ipAddress).setParameter("pharmacyLocationId", deleteRecords.getId())
			 .setParameter("lastModifiedDate", new Date(), TemporalType.TIMESTAMP).setParameter("userActivityId", pkActivityId).executeUpdate();	
			 
		} catch (Exception exception) {
			exception.printStackTrace();
			return false;
		}
		return result;
	}

	@Override
	public boolean checkLocationCode(String pharmacyLocationCode,Long locationId) {
		try {
			return entityManager.createQuery(
					"select table.pharmacyLocationCode as pharmacyLocationCode from PharmacyLocationEntity table where "
							+ " table.pharmacyLocationCode='" + pharmacyLocationCode+"' and table.recordType<>'D' and table.pharmacyLocationId!="+locationId)
					.getSingleResult() == null ? false : true;
		} catch (NoResultException ex) {
			return false;
		} catch (Exception exception) {
			exception.printStackTrace();
			return true;
		}
	
	}

	@Override
	public boolean addPharmacyLocation(PharmacyLocationEntity pharmacyLocationEntity, PharmacyLocationBean pharmacyLocationBean) {
		try {
			Session session = (Session) entityManager.getDelegate();
			
			String tablename = 	dbCustomFunctions.getTableName(PharmacyLocationEntity.class);
			String columnName = dbCustomFunctions.getPkColumnName(PharmacyLocationEntity.class, session);
			Long pkActivityId = userActivityDetailsManagerDao.insertScreenActivity(pharmacyLocationBean.getLoginDetailId(), pharmacyLocationBean.getScreenName(),pharmacyLocationBean.getActivityName(), null,null, tablename, columnName, null, null,pharmacyLocationBean.getPharmacyLocationName());
			pharmacyLocationEntity.setUserActivityId(pkActivityId);
			Long pk = (Long)session.save(pharmacyLocationEntity);
			
			 userActivityDetailsManagerDao.updateActivityRow(null, null, pk, pkActivityId);
		} catch (Exception exception) {
			exception.printStackTrace();
			return false;
		}
		return true;
	}

	@Override
	public PharmacyLocationEntity findPharmacyById(PayloadBean payloadBean) {
		Session session = (Session) entityManager.getDelegate();
		PharmacyLocationEntity pharmacyLocationEntity =entityManager.find(PharmacyLocationEntity.class, payloadBean.getId());
		
		String tablename = 	dbCustomFunctions.getTableName(PharmacyLocationEntity.class);
		String columnName = dbCustomFunctions.getPkColumnName(PharmacyLocationEntity.class, session);
		 userActivityDetailsManagerDao.insertScreenActivity(payloadBean.getLoginDetailId(), payloadBean.getScreenName(),payloadBean.getActivityName(), null,null, tablename, columnName, payloadBean.getId(), null,null);	
		return pharmacyLocationEntity;
	}

	@Override
	public boolean updatePharmacyLocations(PharmacyLocationEntity pharmacyLocationEntity, PharmacyLocationBean pharmacyLocationBean) {
		boolean result = true;
		try {
			Session session = (Session) entityManager.getDelegate();
			String tablename = 	dbCustomFunctions.getTableName(PharmacyLocationEntity.class);
			String columnName = dbCustomFunctions.getPkColumnName(PharmacyLocationEntity.class, session);
			Long pkActivityId = userActivityDetailsManagerDao.insertScreenActivity(pharmacyLocationBean.getLoginDetailId(), pharmacyLocationBean.getScreenName(),pharmacyLocationBean.getActivityName(), null,null, tablename, columnName, pharmacyLocationBean.getPharmacyLocationId(), null,pharmacyLocationBean.getPharmacyLocationName());
			
			pharmacyLocationEntity.setUserActivityId(pkActivityId);
			session.update(pharmacyLocationEntity);
		} catch (Exception exception) {
			exception.printStackTrace();
			return false;
		}
		return result;
	}

	@Override
	public boolean checkLocationName(String pharmacyLocationName, Long locationId) {
		try {
			return entityManager.createQuery(
					"select table.pharmacyLocationName as pharmacyLocationName from PharmacyLocationEntity table where "
							+ " table.pharmacyLocationName='" + pharmacyLocationName+"' and table.recordType<>'D' and table.pharmacyLocationId!="+locationId)
					.getSingleResult() == null ? false : true;
		} catch (NoResultException ex) {
			return false;
		} catch (Exception exception) {
			exception.printStackTrace();
			return true;
		}
	
	}
	

	@Override
	public boolean addPharmacyLocationRobot(PharmacyLocationRobotEntity pharmacyLocationRobotEntity, PharmacyLocationBean pharmacyLocationBean) {
		try {
			Session session = (Session) entityManager.getDelegate();
			String tablename = 	dbCustomFunctions.getTableName(PharmacyLocationRobotEntity.class);
			String columnName = dbCustomFunctions.getPkColumnName(PharmacyLocationRobotEntity.class, session);
			Long pkActivityId = userActivityDetailsManagerDao.insertScreenActivity(pharmacyLocationBean.getLoginDetailId(), pharmacyLocationBean.getScreenName(),pharmacyLocationBean.getActivityName(), null,null, tablename, columnName, null, null,pharmacyLocationRobotEntity.getRobotName());
			
			
			pharmacyLocationRobotEntity.setUserActivityId(pkActivityId);
		Long pk = (Long) session.save(pharmacyLocationRobotEntity);	
		
		 userActivityDetailsManagerDao.updateActivityRow(null, null, pk, pkActivityId);
			
			
		} catch (Exception exception) {
			exception.printStackTrace();
			return false;
		}
		return true;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<PharmacyLocationRobotEntity> fetchPharmacyLocationRobots(Long id) {
		List<PharmacyLocationRobotEntity> pharmacyLocationRobotEntityList = null;
		String sqlQuery = "";
		try {
			Session session = (Session) entityManager.getDelegate();
			sqlQuery ="From PharmacyLocationRobotEntity robot where robot.pharmacyLocation ="+id+"";
			pharmacyLocationRobotEntityList = (List<PharmacyLocationRobotEntity>) session.createQuery(sqlQuery).list();
		}catch (Exception exception) {
			exception.printStackTrace();
			return null;
		}		
		return pharmacyLocationRobotEntityList;
	}

	@Override
	public boolean checkRobotName(String searchParameter,Long id) {
		try {
			return entityManager.createQuery(
					"select table.robotName as robotName from PharmacyLocationRobotEntity table where "
							+ " table.robotName='"+searchParameter+"' AND table.robotId !="+id+"")
					.getSingleResult() == null ? false : true;
		} catch (NoResultException ex) {
			return false;
		} catch (Exception exception) {
			exception.printStackTrace();
			return true;
		}
	}

	@Override
	public boolean checkRobotCode(String customParameter,Long id) {
		try {
			return entityManager.createQuery(
					"select table.robotCode as robotCode from PharmacyLocationRobotEntity table where "
							+ " table.robotCode='"+customParameter+"' AND table.robotId !="+id+"")
					.getSingleResult() == null ? false : true;
		} catch (NoResultException ex) {
			return false;
		} catch (Exception exception) {
			exception.printStackTrace();
			return true;
		}
	}

	@Override
	public boolean updatePharmacyLocationRobot(PharmacyLocationRobotEntity pharmacyLocationRobotEntity,PharmacyLocationBean pharmacyLocationBean) {
		boolean result = true;
		try {
			Session session = (Session) entityManager.getDelegate();
			String tablename = 	dbCustomFunctions.getTableName(PharmacyLocationRobotEntity.class);
			String columnName = dbCustomFunctions.getPkColumnName(PharmacyLocationRobotEntity.class, session);
			Long pkActivityId = userActivityDetailsManagerDao.insertScreenActivity(pharmacyLocationBean.getLoginDetailId(), pharmacyLocationBean.getScreenName(),pharmacyLocationBean.getActivityName(), null,null, tablename, columnName, pharmacyLocationRobotEntity.getRobotId(), null,pharmacyLocationRobotEntity.getRobotName());
			
			pharmacyLocationRobotEntity.setUserActivityId(pkActivityId);
			session.update(pharmacyLocationRobotEntity);
		} catch (Exception exception) {
			exception.printStackTrace();
			return false;
		}
		return result;
	}

	@Override
	public boolean isPharmacyLocationAssigned(Long id) {
		try {
			return entityManager.createQuery(
					"select table.pharmacyLocationUserId  from PharmacyLocationUserEntity table where "
							+ " table.pharmacyLocation.pharmacyLocationId=" + id+" and table.pharmacyLocation.recordType<>'D' and table.recordType<>'D'")
					.getSingleResult() == null ? false : true;
		} catch (NoResultException ex) {
			return false;
		} catch (Exception exception) {
			exception.printStackTrace();
			return true;
		}
	}

}
